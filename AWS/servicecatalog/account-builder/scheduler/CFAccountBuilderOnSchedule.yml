AWSTemplateFormatVersion: 2010-09-09
Description: Account Builder Scheduler
Parameters:
  sourcebucket:
    Description: "Source bucket where lambda function zip file is stored."
    Default : na
    Type: String
  accountAlertSNSRegion:
    Description: "Region where SNS Topic is setup for account alerts"
    Default : "na"
    Type: String
  accountAlertSNSTopic:
    Description: "SNS Topic to send out new/delete account alerts"
    Default : "na"
    Type: String
  AlertSchedule:
    Default: cron(0/60 * * * ? *)
    Type: String
  CGPrincipalID:
    Type: String
    Description: Principal ID of the master account.
    Default: 'o-1eax4cor5e'
  SQSRegionName:
    Default: us-east-1
    Type: String
  ProductEmailAlert:
    Type: String
    Description: Email address where SNS notifications will be sent.
    Default: 'shnc@capgroup.com'
Resources:
  ScheduleCWAccountBuilderRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: ServiceCatalog-ScheduleCWAccountBuilderRule
      Description: Schedule that runs every hour Sun to Sat invoking lambda to check SQS queue for new messages.
      ScheduleExpression: !Ref AlertSchedule
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFAccountBuilderOnSchedule"
              - "Arn"
          Id: "LFAccountBuilderOnScheduleProd"
  PermissionForRuleToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFAccountBuilderOnSchedule
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - ScheduleCWAccountBuilderRule
          - Arn
  LFAccountBuilderOnSchedule:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: ServiceCatalog-LFAccountBuilderOnSchedule
      Handler: "LFAccountBuilderOnSchedule.lambda_handler"
      Runtime: "python3.8"
      Role: !GetAtt LFAccountBuilderOnScheduleRole.Arn
      Environment:
        Variables:
          SNS_REGION:
            Ref: accountAlertSNSRegion
          SNS_TOPIC_ARN:
            Ref: accountAlertSNSTopic
          SQSRegionName: !Ref SQSRegionName
          SQSURL: !Ref SCAccountBuilderQueue
      Timeout: 300
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      Code:
        S3Bucket: !Ref sourcebucket
        S3Key: "servicecatalog/account-builder/scheduler/LFAccountBuilderOnSchedule.zip"
        S3ObjectVersion: "XY6g9p3NE.Kx9Gtnc8b.iw4R9KNBwKGp"
  LFAccountBuilderOnScheduleLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFAccountBuilderOnSchedule
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFAccountBuilderOnSchedule
      RetentionInDays: 14

  LFAccountBuilderOnScheduleRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: ServiceCatalog-LFAccountBuilderOnScheduleRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: ServiceCatalog-LFAccountBuilderOnSchedulePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'sns:Publish'
                Resource:
                  - '*'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AWSOrganizationsFullAccess'
  LFABSendSNSResponse:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ServiceCatalog-LFABSendSNSResponse
      Description: This function is the CFN response module 
      Handler: LFABSendSNSResponse.lambda_handler
      Role: !GetAtt 
        - LFABSendSNSResponseRole
        - Arn
      Runtime: python3.8 
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      Timeout: 30
      Code:
        S3Bucket: !Ref sourcebucket
        S3Key: "servicecatalog/account-builder/scheduler/LFABSendSNSResponse.zip"
        S3ObjectVersion: "RwbMDolw2yzH_k2_OzFktYB0I3383k3Q"
  LFABSendSNSResponseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ServiceCatalog-LFABSendSNSResponseRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFABSendSNSResponsePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
  LFABSendSNSResponseLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFABSendSNSResponse
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFABSendSNSResponse
      RetentionInDays: 14
  SCAccountBuilderTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: "SCAccountBuilderTopic"
      Subscription:
        - Endpoint: !Ref ProductEmailAlert
          Protocol: email
        - Endpoint: !GetAtt 
            - SCAccountBuilderQueue
            - Arn
          Protocol: sqs
        - Endpoint: !GetAtt 
            - LFABSendSNSResponse
            - Arn
          Protocol: lambda
  SCAccountBuilderTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SCAccountBuilderTopicPolicy
        Version: 2008-10-17
        Statement:
          - Sid: Access-Only-To-Master-Account
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource: !Ref 'SCAccountBuilderTopic'
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Ref 'AWS::AccountId'
          - Sid: Publish-Access-to-member-accounts
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 'SNS:Publish'
            Resource: !Ref 'SCAccountBuilderTopic'
            Condition:
              StringEquals:
                'aws:PrincipalOrgID': !Ref CGPrincipalID
      Topics:
      - !Ref SCAccountBuilderTopic
  SCAccountBuilderQueue:
    Type: AWS::SQS::Queue
    Properties: 
      MessageRetentionPeriod: 1209600
      QueueName: ServiceCatalog-AccountBuilder-Queue
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 90
  SCAccountBuilderQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'sqs:SendMessage'
            Resource: '*'
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref SCAccountBuilderTopic
      Queues:
        - !Ref SCAccountBuilderQueue