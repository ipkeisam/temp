AWSTemplateFormatVersion: 2010-09-09
Description: KMS provisioning within existing account
Parameters:
  sourceBucket:
    Default: organization-repo  
    Type: String
  SecretsManagerRegion:
    Default: us-east-1
    Type: String
  KMSServiceAccountCreds:
    Default: KMSServiceAccountCreds
    Type: String
  KMSOktaURL:
    Default: https://capgroup.okta.com/oauth2/aus1gdjnsxvx1kTEb1d8/v1/token?grant_type=client_credentials
    Type: String
  KMSAPIURL:
    Default: https://keys.capgroup.com:8443/hsm
    Type: String
  ProductEmailAlert:
    Type: String
    Description: Email address where SNS notifications will be sent.
    Default: 'shnc@capgroup.com'
  CGPrincipalID:
    Type: String
    Description: Principal ID of the master account.
    Default: 'o-1eax4cor5e'
  SQSRegionName:
    Default: us-east-1
    Type: String
  AlertSchedule:
    Default: cron(0/30 * * * ? *)
    Type: String
  SNSRegion:
    Default: us-east-1  
    Type: String
  SNSTopicARN:
    Default: arn:aws:sns:us-east-1:848721808596:SNSTopicForSCProductAlerts  
    Type: String    
Resources:
  ScheduleCWLambdaKMSRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: ServiceCatalog-ScheduleCWLambdaKMSRule
      Description: Schedule that runs every 30 mins Sun to Sat invoking lambda to check SQS queue for new messages.
      ScheduleExpression: !Ref AlertSchedule
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFCreateNewKMSKeys"
              - "Arn"
          Id: "LFCreateNewKMSKeysProd"
  PermissionForRuleToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFCreateNewKMSKeys
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - ScheduleCWLambdaKMSRule
          - Arn
  LFCreateNewKMSKeys:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ServiceCatalog-LFCreateNewKMSKeys
      Environment:
        Variables:
          SecretsManagerRegionName: !Ref SecretsManagerRegion
          KMSServiceAccountCreds: !Ref KMSServiceAccountCreds
          KMSOktaURL: !Ref KMSOktaURL
          KMS_URL: !Ref KMSAPIURL
          SQSRegionName: !Ref SQSRegionName
          SQSURL: !Ref ServiceCatalogKMSQueue
          SNS_REGION: !Ref SNSRegion
          SNS_TOPIC_ARN: !Ref SNSTopicARN
      Description: This function is the KMS onboarding module 
      Handler: LFCreateNewKMSKeys.lambda_handler
      Role: !GetAtt 
        - LFCreateNewKMSKeysRole
        - Arn
      Runtime: python3.8 
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      Timeout: 90
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "servicecatalog/appl-portfolio/LFCreateNewKMSKeys.zip"
        S3ObjectVersion: "s5N8TRGTLFvky1SYanE_SCvJXL0y434l"
      VpcConfig:
        SecurityGroupIds: 
          - sg-029facd71b9750091
        SubnetIds: 
          - subnet-0d16801c03a7f80d9
          - subnet-0e9fb2a1b52350f64 
  LFCreateNewKMSKeysRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ServiceCatalog-LFCreateNewKMSKeysRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFCreateNewKMSKeysPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'ec2:CreateKMSInterface'
                  - 'ec2:DescribeKMSInterfaces'
                  - 'ec2:DeleteKMSInterface'
                  - 'ec2:ModifyEbsDefaultKmsKeyId'
                  - 'ec2:ResetEbsDefaultKmsKeyId'
                  - 'ec2:EnableEbsEncryptionByDefault'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                  - 'kms:TagResource'
                  - 'kms:CreateKey'
                  - 'kms:PutKeyPolicy'
                  - 'kms:GetParametersForImport'
                  - 'kms:CreateAlias'
                  - 'kms:ImportKeyMaterial'
                  - 'kms:DescribeKey'
                  - 'kms:ListKeys'
                  - 'kms:ListAliases'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                  - 'organizations:DescribeAccount'
                  - 'organizations:ListTagsForResource'
                  - 'sns:Publish'
                Resource:
                  - '*'
  LFCreateNewKMSKeysLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFCreateNewKMSKeys
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFCreateNewKMSKeys
      RetentionInDays: 14
  LFKMSSendSNSResponse:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ServiceCatalog-LFKMSSendSNSResponse
      Description: This function is the CFN response module 
      Handler: LFKMSSendSNSResponse.lambda_handler
      Role: !GetAtt 
        - LFKMSSendSNSResponseRole
        - Arn
      Runtime: python3.8 
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      Timeout: 30
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "servicecatalog/appl-portfolio/LFKMSSendSNSResponse.zip"
  LFKMSSendSNSResponseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: ServiceCatalog-LFKMSSendSNSResponseRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFKMSSendSNSResponsePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
  LFKMSSendSNSResponseLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFKMSSendSNSResponse
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFKMSSendSNSResponse
      RetentionInDays: 14
  ServiceCatalogKMSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: "ServiceCatalogKMSTopic"
      Subscription:
        - Endpoint: !Ref ProductEmailAlert
          Protocol: email
        - Endpoint: !GetAtt 
            - ServiceCatalogKMSQueue
            - Arn
          Protocol: sqs
        - Endpoint: !GetAtt 
            - LFKMSSendSNSResponse
            - Arn
          Protocol: lambda
  ServiceCatalogKMSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ServiceCatalogKMSTopicPolicy
        Version: 2008-10-17
        Statement:
          - Sid: Access-Only-To-Master-Account
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource: !Ref 'ServiceCatalogKMSTopic'
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Ref 'AWS::AccountId'
          - Sid: Publish-Access-to-member-accounts
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 'SNS:Publish'
            Resource: !Ref 'ServiceCatalogKMSTopic'
            Condition:
              StringEquals:
                'aws:PrincipalOrgID': !Ref CGPrincipalID
      Topics:
      - !Ref ServiceCatalogKMSTopic
  ServiceCatalogKMSQueue:
    Type: AWS::SQS::Queue
    Properties: 
      MessageRetentionPeriod: 1209600
      QueueName: ServiceAatalog-KMS-Queue
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 90
  ServiceCatalogKMSQueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 'sqs:SendMessage'
            Resource: '*'
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref ServiceCatalogKMSTopic
      Queues:
        - !Ref ServiceCatalogKMSQueue

Outputs:
  LFCreateNewKMSKeysArn:
    Value: !GetAtt LFCreateNewKMSKeys.Arn
  LFKMSSendSNSResponseArn:
    Value: !GetAtt LFKMSSendSNSResponse.Arn
  ServiceCatalogKMSTopicARN:
    Value: !Ref ServiceCatalogKMSTopic
  ServiceCatalogKMSQueueInfo:
    Value: !Join 
      - ' '
      - - 'ARN:'
        - !GetAtt 
          - ServiceCatalogKMSQueue
          - Arn
        - 'URL:'
        - !Ref ServiceCatalogKMSQueue