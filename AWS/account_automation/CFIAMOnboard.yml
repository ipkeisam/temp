AWSTemplateFormatVersion: 2010-09-09
Description: IAM Onboarding for a new account
Parameters:
  sourceBucket:
    Default: na  
    Type: String
  SecretsManagerEndpoint:
    Default: na
    Type: String
  IAMAnsibleTowerURL:
    Default: na
    Type: String
  IAMUserName:
    Default: na  
    Type: String
  SecretsManagerRegion:
    Default: na
    Type: String
  IAMServiceAccountCreds:
    Default: na
    Type: String
  SMKMSKeyID:
    Default: na
    Type: String
  IAMVAAnsibleTowerURL:
    Default: na
    Type: String
  BroadAccessVerticalRoleMapping:
    Default: na
    Type: String
  ReadAccessVerticalRoleMapping:
    Default: na
    Type: String
  IAMDeveloperVAATURL:
    Default: na
    Type: String
Resources:
  LFCreateIAMAutomationCreds:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          IAMUserName: !Ref IAMUserName
          SecretsManagerRegionName: !Ref SecretsManagerRegion
          KMSKeyID: !Ref SMKMSKeyID
      Description: This function creates IAM ansible account and stores credentials in AWS Secrets Manager. 
      Handler: LFCreateAndStoreIAMCreds.lambda_handler
      Role: !GetAtt 
        - LFCreateIAMAutomationCredsRole
        - Arn
      Runtime: python3.8 
      Timeout: 120
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFCreateAndStoreIAMCreds.zip"
  LFCreateIAMAutomationCredsLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFCreateIAMAutomationCreds
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFCreateIAMAutomationCreds
      RetentionInDays: 14
  LFCreateIAMAutomationCredsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFCreateIAMAutomationCredsRole
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFCreateIAMAutomationCredsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:CreateSecret'
                  - 'iam:CreateUser'
                  - 'iam:CreateAccessKey'
                  - 's3:GetObjectAcl'
                  - 's3:GetObject'
                  - 'organizations:DescribeAccount'
                  - 'sts:AssumeRole'
                  - 'kms:GenerateDataKey'
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                  - 'secretsmanager:TagResource'
                Resource:
                  - '*'
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
  LFInvokeIAMAnsibleTowerAPI:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          IAMUserName: !Ref IAMUserName
          SecretsManagerRegionName: !Ref SecretsManagerRegion
          IAMServiceAccountCreds: !Ref IAMServiceAccountCreds
          SECRETS_MANAGER_ENDPOINT: !Ref SecretsManagerEndpoint
          ANSIBLE_TOWER_URL: !Ref IAMAnsibleTowerURL
      Description: This function invokes IAM playbook using ansible tower for new account. 
      Handler: LFInvokeIAMTowerAPI.lambda_handler
      Role: !GetAtt 
        - LFInvokeIAMAnsibleTowerAPIRole
        - Arn
      Runtime: python3.8 
      Timeout: 300
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFInvokeIAMTowerAPI.zip"
        S3ObjectVersion: "mGQOpB84jXv7uLtcAA3TaKdrtR5k2uVA"
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      VpcConfig:
        SecurityGroupIds: 
          - sg-029facd71b9750091
        SubnetIds: 
          - subnet-0d16801c03a7f80d9
          - subnet-0e9fb2a1b52350f64
  LFInvokeIAMAnsibleTowerAPILG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFInvokeIAMAnsibleTowerAPI
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFInvokeIAMAnsibleTowerAPI
      RetentionInDays: 14
  LFInvokeIAMAnsibleTowerAPIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFInvokeIAMAnsibleTowerAPIRole
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFInvokeIAMAnsibleTowerAPIPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:CreateSAMLProvider'
                Resource: '*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource:
                  - '*'

  LFInvokeIAMVATowerAPI:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          BroadAccessVerticalRoleMapping: !Ref BroadAccessVerticalRoleMapping
          ReadAccessVerticalRoleMapping: !Ref ReadAccessVerticalRoleMapping
          SecretsManagerRegionName: !Ref SecretsManagerRegion
          IAMServiceAccountCreds: !Ref IAMServiceAccountCreds
          SECRETS_MANAGER_ENDPOINT: !Ref SecretsManagerEndpoint
          ANSIBLE_TOWER_URL: !Ref IAMVAAnsibleTowerURL
          DEVELOPER_ANSIBLE_TOWER_URL: !Ref IAMDeveloperVAATURL
      Description: This function invokes IAM Vertical Access playbook using ansible tower for new account. 
      Handler: LFInvokeIAMVATowerAPI.lambda_handler
      Role: !GetAtt 
        - LFInvokeIAMVATowerAPIRole
        - Arn
      Runtime: python3.8 
      Timeout: 300
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFInvokeIAMVATowerAPI.zip"
        S3ObjectVersion: "POkRpCUcgdptNLtz6wk6czuH1P2nol_C"
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      VpcConfig:
        SecurityGroupIds: 
          - sg-029facd71b9750091
        SubnetIds: 
          - subnet-0d16801c03a7f80d9
          - subnet-0e9fb2a1b52350f64
  LFInvokeIAMVATowerAPILG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFInvokeIAMVATowerAPI
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFInvokeIAMVATowerAPI
      RetentionInDays: 14
  LFInvokeIAMVATowerAPIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFInvokeIAMVATowerAPIRole
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFInvokeIAMVATowerAPIPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:CreateSAMLProvider'
                Resource: '*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource:
                  - '*'
Outputs:
  LFCreateIAMAutomationCredsArn:
    Value: !GetAtt LFCreateIAMAutomationCreds.Arn
  LFInvokeIAMAnsibleTowerAPIArn:
    Value: !GetAtt LFInvokeIAMAnsibleTowerAPI.Arn
  LFInvokeIAMVATowerAPIArn:
    Value: !GetAtt LFInvokeIAMVATowerAPI.Arn