AWSTemplateFormatVersion: 2010-09-09
Description: Splunk Onboarding for a new account
Parameters:
  sourceBucket:
    Default: na  
    Type: String
  baselineSplunkRegion:
    Default: na 
    Type: String
  baselineSplunkStack:
    Default: na  
    Type: String
  KinesisAccountID:
     Default: na
     Description: AWS Account Number where Kinesis streams are created for Splunk
     Type: String
Resources:
  LFOnboardSplunk:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          BaselineSplunkStack: !Ref baselineSplunkStack
          BaselineSplunkRegion: !Ref baselineSplunkRegion
          KinesisAccount: !Ref KinesisAccountID
      Description: This function provisions Splunk resources within a new account. 
      Handler: LFAccountBaselineSplunk.lambda_handler
      Role: !GetAtt 
        - LFOnboardSplunkRole
        - Arn
      Runtime: python3.8 
      Timeout: 300
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFAccountBaselineSplunk.zip"
        S3ObjectVersion: "jCRlDUlxR64LSpqQXk.mKY2cfRMLBy4f"
  LFOnboardSplunkLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFOnboardSplunk
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFOnboardSplunk
      RetentionInDays: 14
  LFOnboardSplunkRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFOnboardSplunkRole
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFOnboardSplunkPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
  LFSplunkEmailAlert:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function sends email to okta team once IAM automation is invoked successfully
      Handler: LFSendSplunkEmailAlert.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          ExecutionRegion:
            Ref: AWS::Region
          ExecutionAccountId:
            Ref: AWS::AccountId
      Role: !GetAtt 
        - LFSplunkEmailAlertRole
        - Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFSendSplunkEmailAlert.zip"
  LFSplunkEmailAlertLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFSplunkEmailAlert
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFSplunkEmailAlert
      RetentionInDays: 14
  LFSplunkEmailAlertRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFSplunkEmailAlertRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFSplunkEmailAlertPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
Outputs:
  LFOnboardSplunkArn:
    Value: !GetAtt LFOnboardSplunk.Arn
  LFSplunkEmailAlertArn:
    Value: !GetAtt LFSplunkEmailAlert.Arn