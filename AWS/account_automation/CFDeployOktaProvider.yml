AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Okta IAM for a new account
Parameters:
  sourceBucket:
    Default: na  
    Type: String
  baselineOktaIAMTemplate:
    Default: na  
    Type: String
  baselineOktaIAMStack:
    Default: na  
    Type: String
  OktaDevMetadata:
    Default: na
    Type: String
  OktaProdMetadata:
    Default: na
    Type: String
Resources:
  LFDeployOktaIAM:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          SourceBucket: !Ref sourceBucket
          BaselineIAMStack: !Ref baselineOktaIAMStack
          BaselineIAMTemplate: !Ref baselineOktaIAMTemplate
      Description: This function provisions Okta IAM roles within a new account. 
      Handler: LFAccountOktaIAM.lambda_handler
      Role: !GetAtt 
        - LFDeployOktaIAMRole
        - Arn
      Runtime: python3.8 
      Timeout: 300
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFAccountOktaIAM.zip"
        S3ObjectVersion: "7VU5k3mk1OH5tECWGdJRK5Bapk3GT220"
  LFDeployOktaIAMLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFDeployOktaIAM
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFDeployOktaIAM
      RetentionInDays: 14
  LFDeployOktaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFDeployOktaIAMRole
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFDeployOktaIAMPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      - 'arn:aws:iam::aws:policy/AWSOrganizationsFullAccess'
      - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
  LFCreateOktaProvider:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          SourceBucket: !Ref sourceBucket
          OktaDevMetadata: !Ref OktaDevMetadata
          OktaProdMetadata: !Ref OktaProdMetadata
      Description: This function creates SAML providers for a new account. 
      Handler: LFCreateSAMLProvider.lambda_handler
      Role: !GetAtt 
        - LFCreateOktaProviderRole
        - Arn
      Runtime: python3.8 
      Timeout: 300
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFCreateSAMLProvider.zip"
        S3ObjectVersion: "yIV9yDUFDWOFPQDisGe4Pf8L81nUAWxd"
  LFCreateOktaProviderLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFCreateOktaProvider
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFCreateOktaProvider
      RetentionInDays: 14
  LFCreateOktaProviderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFCreateOktaProviderRole
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFCreateOktaProviderPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:CreateSAMLProvider'
                Resource: '*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      - 'arn:aws:iam::aws:policy/AWSOrganizationsFullAccess'
  LFOktaEmailAlert:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function sends email to okta team once IAM automation is invoked successfully
      Handler: LFSendOktaEmailAlert.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          ExecutionRegion:
            Ref: AWS::Region
          ExecutionAccountId:
            Ref: AWS::AccountId
      Role: !GetAtt 
        - LFOktaEmailAlertRole
        - Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFSendOktaEmailAlert.zip"
  LFOktaEmailAlertLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFOktaEmailAlert
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFOktaEmailAlert
      RetentionInDays: 14
  LFOktaEmailAlertRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFOktaEmailAlertRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFOktaEmailAlertPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
Outputs:
  LFDeployOktaIAMArn:
    Value: !GetAtt LFDeployOktaIAM.Arn
  LFCreateOktaProviderArn:
    Value: !GetAtt LFCreateOktaProvider.Arn
  LFOktaEmailAlertArn:
    Value: !GetAtt LFOktaEmailAlert.Arn