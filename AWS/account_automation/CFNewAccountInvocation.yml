AWSTemplateFormatVersion: 2010-09-09
Description: State Machine for end to end automation of a new account
Parameters:
  sourceBucket:
    Default: na  
    Type: String
  OktaEmailAlert:
    Default: na
    Type: String    
  LFApplySCPArn:
     Default: na
     Description: ARN of SCP Lambda Function
     Type: String
  LFCloudabilityOnboardArn:
     Default: na
     Description: ARN of Cloudability Lambda Function
     Type: String
  LFApplyGovernanceIAMRolesArn:
     Default: na
     Description: ARN of GovernanceIAM Lambda Function
     Type: String
  LFDome9OnboardArn:
     Default: na
     Description: ARN of Dome9 Lambda Function
     Type: String
  LFEnableConfigServiceArn:
     Default: na
     Description: ARN of Config Service Lambda Function
     Type: String
  LFDeployOktaIAMArn:
     Default: na
     Description: ARN of Okta IAM Lambda Function
     Type: String
  LFCreateOktaProviderArn:
     Default: na
     Description: ARN of Okta Provider Lambda Function
     Type: String  
  LFOktaEmailAlertArn:
     Default: na
     Description: ARN of Okta Email Alert Lambda Function
     Type: String
  LFQualysOnboardArn:
     Default: na
     Description: ARN of Qualys Lambda Function
     Type: String
  LFGuardDutyOnboardArn:
     Default: na
     Description: ARN of Guard Duty Lambda Function
     Type: String
  LFDeployConfigRulesArn:
     Default: na
     Description: ARN of Config Rules Lambda Function
     Type: String
  LFOnboardSplunkArn:
     Default: na
     Description: ARN of Splunk Onboard Lambda Function
     Type: String
  LFSplunkEmailAlertArn:
     Default: na
     Description: ARN of Splunk Email Alert Lambda Function
     Type: String
  LFCreateIAMAutomationCredsArn:
     Default: na
     Description: ARN of Create IAM Automation Lambda Function
     Type: String
  LFInvokeIAMAnsibleTowerAPIArn:
     Default: na
     Description: ARN of Invoke IAM Ansible Tower Lambda Function
     Type: String
  LFInvokeIAMVATowerAPIArn:
     Default: na
     Description: ARN of Invoke IAM Vertical Access Ansible Tower Lambda Function
     Type: String  
  LFNewAccountKMSKeysArn:
     Default: na
     Description: ARN of Create KMS Keys Lambda Function
     Type: String
  LFGovernanceCWLogAutoTagArn:
     Default: na
     Description: ARN of Governance CWLogGroups Lambda Function
     Type: String
  LFInvokeEmailDistroTowerAPIArn:
     Default: na
     Description: ARN of Email Distribution Lambda Function
     Type: String
  LFUpgradeToEnterrpriseSupportArn:
     Default: na
     Description: ARN of Enterprise Support Case Creation Lambda Function
     Type: String
  LFInvokeNetworkTowerAPIArn:
     Default: na
     Description: ARN of Network Creation Lambda Function
     Type: String
  LFMiscGovernanceControlsArn:
     Default: na
     Description: ARN of Governance Controls Lambda Function
     Type: String
  LFAccountMoveIntoOUArn:
     Default: na
     Description: ARN of Account OU Lambda Function
     Type: String
  AnsibleTowerURL:
    Default: na
    Type: String
  SecretsManagerRegion:
    Default: na
    Type: String
  IAMServiceAccountCreds:
    Default: na
    Type: String
  SNOWAPIURL:
    Default: na
    Type: String
  SNOWParametersFile:
    Default: na
    Type: String
  ServiceNowCredentials:
    Default: na
    Type: String
  AccountSchedulerName:
    Default: na
    Type: String
  AccountSchedulerRegion:
    Default: na
    Type: String
  ConfluenceURL:
    Default: na
    Type: String
  AlertSchedule:
    Default: cron(0 4 ? * MON-FRI *)
    Type: String
Resources:
  CWScheduleConfluenceUpdateRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: Governance-CWScheduleConfluenceUpdateRule
      Description: Schedule that runs every day Sun to Sat invoking lambda to update AWS account list confluence page.
      ScheduleExpression: !Ref AlertSchedule
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFUpdateAccountAdminConfluence"
              - "Arn"
          Id: "LFUpdateAccountAdminConfluenceProd"
  PermissionForRuleToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFUpdateAccountAdminConfluence
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - CWScheduleConfluenceUpdateRule
          - Arn
  SFSMNewAccountBaseline:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: AccountVending-StateMachine
      RoleArn: !GetAtt 
        - SFSMNewAccountBaselineRole
        - Arn
      DefinitionString: 
        Fn::Sub:
          - |-
            {
              "StartAt": "TaskCheckValidAccount",
              "States": {
                "TaskCheckValidAccount": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.is_valid_account",
                      "BooleanEquals": false,
                      "Next": "Success"
                    }
                  ],
                  "Default": "TaskInvokeEmailDistroTowerAPI"
                },
                "TaskInvokeEmailDistroTowerAPI": {
                  "Type": "Task",
                  "Resource": "${LFInvokeEmailDistroTowerAPIArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskUpgradeToEnterrpriseSupport"
                  } ],
                  "Next": "TaskUpgradeToEnterrpriseSupport"
                },
                "TaskUpgradeToEnterrpriseSupport": {
                  "Type": "Task",
                  "Resource": "${LFUpgradeToEnterrpriseSupportArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskApplyAccountSCP"
                  } ],
                  "Next": "TaskApplyAccountSCP"
                },
                "TaskApplyAccountSCP": {
                  "Type": "Task",
                  "Resource": "${LFApplySCPArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "wait_few_minutes_for_new_account_readiness"
                  } ],
                  "Next": "wait_few_minutes_for_new_account_readiness"
                },
                "wait_few_minutes_for_new_account_readiness": {
                  "Type": "Wait",
                  "Seconds": 100,
                  "Next": "TaskSetupAccountOktaIAM"
                },
                "TaskSetupAccountOktaIAM": {
                  "Type": "Task",
                  "Resource": "${LFDeployOktaIAMArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskCreateSAMLProvider"
                  } ],
                  "Next": "TaskCreateSAMLProvider"
                },
                "TaskCreateSAMLProvider": {
                  "Type": "Task",
                  "Resource": "${LFCreateOktaProviderArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskInvokeIAMVATowerAPI"
                  } ],
                  "Next": "TaskInvokeIAMVATowerAPI"
                },
                "TaskInvokeIAMVATowerAPI": {
                  "Type": "Task",
                  "Resource": "${LFInvokeIAMVATowerAPIArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskSetupAccountSecurityIAM"
                  } ],
                  "Next": "TaskSetupAccountSecurityIAM"
                },
                "TaskSetupAccountSecurityIAM": {
                  "Type": "Task",
                  "Resource": "${LFCreateIAMAutomationCredsArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskInvokeIAMTowerAPI"
                  } ],
                  "Next": "TaskInvokeIAMTowerAPI"
                },
                "TaskInvokeIAMTowerAPI": {
                  "Type": "Task",
                  "Resource": "${LFInvokeIAMAnsibleTowerAPIArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskCheckIAMInvoked"
                  } ],
                  "Next": "TaskCheckIAMInvoked"
                },
                "TaskCheckIAMInvoked": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.is_iam_playbook_invoked",
                      "BooleanEquals": false,
                      "Next": "TaskSendEmailViaSNS"
                    }
                  ],
                  "Default": "TaskSetupAccountGovernanceIAM"
                },
                "TaskSetupAccountGovernanceIAM": {
                  "Type": "Task",
                  "Resource": "${LFApplyGovernanceIAMRolesArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskCheckGovernanceIAMCreation"
                  } ],
                  "Next": "TaskCheckGovernanceIAMCreation"
                },
                "TaskCheckGovernanceIAMCreation": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.is_iam_stack_created",
                      "BooleanEquals": false,
                      "Next": "TaskSendEmailViaSNS"
                    }
                  ],
                  "Default": "TaskSetupAccountConfigService"
                },
                "TaskSetupAccountConfigService": {
                  "Type": "Task",
                  "Resource": "${LFEnableConfigServiceArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskCheckConfigServiceEnabled"
                  } ],
                  "Next": "TaskCheckConfigServiceEnabled"
                },
                "TaskCheckConfigServiceEnabled": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.is_configservice_stack_created",
                      "BooleanEquals": false,
                      "Next": "TaskNewAccountConfigRule"
                    }
                  ],
                  "Default": "TaskNewAccountConfigRule"
                },
                "TaskNewAccountConfigRule": {
                  "Type": "Task",
                  "Resource": "${LFDeployConfigRulesArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskEnableCloudability"
                  } ],
                  "Next": "TaskEnableCloudability"
                },
                "TaskEnableCloudability": {
                  "Type": "Task",
                  "Resource": "${LFCloudabilityOnboardArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "wait_few_minutes_for_iam_readiness"
                  } ],
                  "Next": "wait_few_minutes_for_iam_readiness"
                },
                "wait_few_minutes_for_iam_readiness": {
                  "Type": "Wait",
                  "Seconds": 200,
                  "Next": "TaskAccountDome9Onboard"
                },
                "TaskAccountDome9Onboard": {
                  "Type": "Task",
                  "Resource": "${LFDome9OnboardArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskEnableGuardDuty"
                  } ],
                  "Next": "TaskEnableGuardDuty"
                },
                "TaskEnableGuardDuty": {
                  "Type": "Task",
                  "Resource": "${LFGuardDutyOnboardArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskEnableQualys"
                  } ],
                  "Next": "TaskEnableQualys"
                },
                "TaskEnableQualys": {
                  "Type": "Task",
                  "Resource": "${LFQualysOnboardArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskAccountBaselineSplunk"
                  } ],
                  "Next": "TaskAccountBaselineSplunk"
                },
                "TaskAccountBaselineSplunk": {
                  "Type": "Task",
                  "Resource": "${LFOnboardSplunkArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskCheckSplunkIntegration"
                  } ],
                  "Next": "TaskCheckSplunkIntegration"
                },
                "TaskCheckSplunkIntegration": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.is_splunk_stack_created",
                      "BooleanEquals": false,
                      "Next": "TaskMoveAccountToOU"
                    }
                  ],
                  "Default": "TaskSendSplunkEmailAlert"
                },
                "TaskSendSplunkEmailAlert": {
                  "Type": "Task",
                  "Resource": "${LFSplunkEmailAlertArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskMoveAccountToOU"
                  } ],
                  "Next": "TaskMoveAccountToOU"
                },
                "TaskMoveAccountToOU": {
                  "Type": "Task",
                  "Resource": "${LFAccountMoveIntoOUArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "wait_for_transitgateway_readiness"
                  } ],
                  "Next": "wait_for_transitgateway_readiness"
                },
                "wait_for_transitgateway_readiness": {
                  "Type": "Wait",
                  "Seconds": 120,
                  "Next": "TaskInvokeNetworkTowerAPI"
                },
                "TaskInvokeNetworkTowerAPI": {
                  "Type": "Task",
                  "Resource": "${LFInvokeNetworkTowerAPIArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskInvokeKMSAPI"
                  } ],
                  "Next": "TaskInvokeKMSAPI"
                },
                "TaskInvokeKMSAPI": {
                  "Type": "Task",
                  "Resource": "${LFNewAccountKMSKeysArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskUpdateConfluencePage"
                  } ],
                  "Next": "TaskUpdateConfluencePage"
                },
                "TaskUpdateConfluencePage": {
                  "Type": "Task",
                  "Resource": "${LFUpdateAccountAdminConfluence.Arn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskSetupAccountGovernanceControls"
                  } ],
                  "Next": "TaskSetupAccountGovernanceControls"
                },
                "TaskSetupAccountGovernanceControls": {
                  "Type": "Task",
                  "Resource": "${LFMiscGovernanceControlsArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskInvokeGovernanceCWLogAutoTag"
                  } ],
                  "Next": "TaskInvokeGovernanceCWLogAutoTag"
                },
                "TaskInvokeGovernanceCWLogAutoTag": {
                  "Type": "Task",
                  "Resource": "${LFGovernanceCWLogAutoTagArn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskSendEmailViaSNS"
                  } ],
                  "Next": "TaskSendEmailViaSNS"
                },
                "TaskSendEmailViaSNS": {
                  "Type": "Task",
                  "Resource": "${LFSendAcctAlertViaEmail.Arn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskVerifyTowerJobs"
                  } ],
                  "Next": "TaskVerifyTowerJobs"
                },
                "TaskVerifyTowerJobs": {
                  "Type": "Task",
                  "Resource": "${LFVerifyTowerJobs.Arn}",
                  "ResultPath": "$",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "TaskSendStatusViaSNS"
                  } ],
                  "Next": "TaskSendStatusViaSNS"
                },
                "TaskSendStatusViaSNS": {
                  "Type": "Task",
                  "Resource": "${LFSendSNSResponse.Arn}",
                  "Catch": [ {
                      "ErrorEquals": ["States.ALL"],
                      "ResultPath": "$.error",
                      "Next": "Success"
                  } ],
                  "Next": "Success"
                },
                "Success": {
                  "Type": "Succeed"
                }
              }
            }
          - {
            LFCloudabilityOnboardArn: !Ref LFCloudabilityOnboardArn,
            LFApplySCPArn: !Ref LFApplySCPArn,
            LFApplyGovernanceIAMRolesArn: !Ref LFApplyGovernanceIAMRolesArn,
            LFDome9OnboardArn: !Ref LFDome9OnboardArn,
            LFEnableConfigServiceArn: !Ref LFEnableConfigServiceArn,
            LFDeployConfigRulesArn: !Ref LFDeployConfigRulesArn,
            LFDeployOktaIAMArn: !Ref LFDeployOktaIAMArn,
            LFCreateOktaProviderArn: !Ref LFCreateOktaProviderArn,
            LFQualysOnboardArn: !Ref LFQualysOnboardArn,
            LFGuardDutyOnboardArn: !Ref LFGuardDutyOnboardArn,
            LFOnboardSplunkArn: !Ref LFOnboardSplunkArn,
            LFSplunkEmailAlertArn: !Ref LFSplunkEmailAlertArn,
            LFCreateIAMAutomationCredsArn: !Ref LFCreateIAMAutomationCredsArn,
            LFInvokeIAMAnsibleTowerAPIArn: !Ref LFInvokeIAMAnsibleTowerAPIArn,
            LFInvokeIAMVATowerAPIArn: !Ref LFInvokeIAMVATowerAPIArn,
            LFNewAccountKMSKeysArn: !Ref LFNewAccountKMSKeysArn,
            LFGovernanceCWLogAutoTagArn: !Ref LFGovernanceCWLogAutoTagArn,
            LFInvokeEmailDistroTowerAPIArn: !Ref LFInvokeEmailDistroTowerAPIArn,
            LFUpgradeToEnterrpriseSupportArn: !Ref LFUpgradeToEnterrpriseSupportArn,
            LFInvokeNetworkTowerAPIArn: !Ref LFInvokeNetworkTowerAPIArn,
            LFMiscGovernanceControlsArn: !Ref LFMiscGovernanceControlsArn,
            LFAccountMoveIntoOUArn: !Ref LFAccountMoveIntoOUArn
            }
  SFSMNewAccountBaselineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: SFSMNewAccountBaselineRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: SFSMNewAccountBaselinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
  LFSendAcctAlertViaEmail:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function sends email with final status of resources created for new account
      Handler: LFSendAcctAlertViaEmail.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          ExecutionRegion:
            Ref: AWS::Region
          ExecutionAccountId:
            Ref: AWS::AccountId
      Role: !GetAtt 
        - LFSendAcctAlertViaEmailRole
        - Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFSendAcctAlertViaEmail.zip"
        S3ObjectVersion: "Cc0f_YhjLIKunmbj9Isr0YY3Hw6R0HLs"
  LFSendAcctAlertViaEmailLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFSendAcctAlertViaEmail
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFSendAcctAlertViaEmail
      RetentionInDays: 14
  LFSendAcctAlertViaEmailRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFSendAcctAlertViaEmailRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFSendAcctAlertViaEmailPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
  LFSendSNSResponse:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function sends json object to SNS topic with account creation status
      Handler: LFSendSNSResponse.lambda_handler
      Runtime: python3.8
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopicForNewAccountCreation
          SNS_REGION:
            Ref: AWS::Region
          SNOW_API_URL: !Ref SNOWAPIURL
          SNOW_PARAMETERS_FILE: !Ref SNOWParametersFile
          SOURCE_BUCKET: !Ref sourceBucket
          ACCOUNT_SCHEDULER_NAME: !Ref AccountSchedulerName
          ACCOUNT_SCHEDULER_REGION: !Ref AccountSchedulerRegion
          ServiceNowCredentials: !Ref ServiceNowCredentials
          SecretsManagerRegionName: !Ref SecretsManagerRegion
      Role: !GetAtt 
        - LFSendSNSResponseRole
        - Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFSendSNSResponse.zip"
        S3ObjectVersion: "QMABFGDHds_gu3KsLdrLV8cWxdqPVcLJ"
      VpcConfig:
        SecurityGroupIds: 
          - sg-029facd71b9750091
        SubnetIds: 
          - subnet-0d16801c03a7f80d9
          - subnet-0e9fb2a1b52350f64
  LFSendSNSResponseLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFSendSNSResponse
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFSendSNSResponse
      RetentionInDays: 14
  LFSendSNSResponseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFSendSNSResponseRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFSendSNSResponsePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                  - 'kms:DescribeKey'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 's3:GetBucketEncryption'
                  - 's3:GetBucketVersioning'
                  - 's3:ListObjectsV2'
                  - 's3:ListObjects'
                  - 's3:ListAllMyBuckets'
                  - 's3:HeadBucket'
                  - 's3:ListBucket'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListParts'
                  - 's3:ListMultipartUploadParts'
                Resource:
                  - 'arn:aws:s3:::*/*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref SNSTopicForNewAccountCreation
  LFVerifyTowerJobs:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function verifies the execution of all tower jobs and sends a status update
      Handler: LFVerifyTowerJobs.lambda_handler
      Runtime: python3.8
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
      Environment:
        Variables:
          TOWER_URL: !Ref AnsibleTowerURL
          ServiceAccountCreds: !Ref IAMServiceAccountCreds
          SecretsManagerRegionName: !Ref SecretsManagerRegion
          SNS_TOPIC_ARN: !Ref SNSTopicForNewAccountCreation
          SNS_REGION:
            Ref: AWS::Region
      Role: !GetAtt 
        - LFVerifyTowerJobsRole
        - Arn
      Timeout: 30
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFVerifyTowerJobs.zip"
        S3ObjectVersion: "wVfs8rRBxquTIJ2KzxxBEHUV6Mja1XHc"
      VpcConfig:
        SecurityGroupIds: 
          - sg-029facd71b9750091
        SubnetIds: 
          - subnet-0d16801c03a7f80d9
          - subnet-0e9fb2a1b52350f64
  LFVerifyTowerJobsLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFVerifyTowerJobs
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFVerifyTowerJobs
      RetentionInDays: 14
  LFVerifyTowerJobsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFVerifyTowerJobsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFVerifyTowerJobsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource:
                  - '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
  LFUpdateAccountAdminConfluence:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function updates confluence page with latest account details
      Handler: LFUpdateAccountAdminConfluence.lambda_handler
      Runtime: python3.8
      Layers: 
        - arn:aws:lambda:us-east-1:848721808596:layer:http-requests:2
        - arn:aws:lambda:us-east-1:848721808596:layer:cg-utility-modules:2
      Environment:
        Variables:
          CONFLUENCE_URL: !Ref ConfluenceURL
          SERVICE_ACCOUNT_CREDENTIALS: !Ref IAMServiceAccountCreds
          SECRETS_MANAGER_REGION: !Ref SecretsManagerRegion
      Role: !GetAtt 
        - LFUpdateAccountAdminConfluenceRole
        - Arn
      Timeout: 240
      Code:
        S3Bucket: !Ref sourceBucket
        S3Key: "acctautomation/LFUpdateAccountAdminConfluence.zip"
        S3ObjectVersion: "o9Yjv69grFLxjej4VELgKfWpkAPoa9t_"
      VpcConfig:
        SecurityGroupIds: 
          - sg-029facd71b9750091
        SubnetIds: 
          - subnet-0d16801c03a7f80d9
          - subnet-0e9fb2a1b52350f64
  LFUpdateAccountAdminConfluenceLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFUpdateAccountAdminConfluence
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFUpdateAccountAdminConfluence
      RetentionInDays: 14
  LFUpdateAccountAdminConfluenceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccountVending-LFUpdateAccountAdminConfluenceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFUpdateAccountAdminConfluencePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/*:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource:
                  - '*'
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess'
  SNSTopicForNewAccountCreation:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: "SNSTopicForNewAccountCreation"
      Subscription:
        - Endpoint: "shnc@capgroup.com"
          Protocol: email
  SNSTopicForNewAccountCreationPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicForNewAccountCreationPolicy
        Version: 2008-10-17
        Statement:
          - Sid: Access-Only-To-Master-Account
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource: !Ref 'SNSTopicForNewAccountCreation'
            Condition:
              StringEquals:
                'AWS:SourceOwner': '848721808596'
      Topics:
      - !Ref SNSTopicForNewAccountCreation
  SNSTopicForNewAccountAlerts:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: "SNSTopicForNewAccountAlerts"
      Subscription:
        - Endpoint: "shnc@capgroup.com"
          Protocol: email
  SNSTopicNewAccountPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicNewAccountPolicy
        Version: 2008-10-17
        Statement:
          - Sid: Access-Only-To-Master-Account
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource: !Ref 'SNSTopicForNewAccountAlerts'
            Condition:
              StringEquals:
                'AWS:SourceOwner': '848721808596'
      Topics:
      - !Ref SNSTopicForNewAccountAlerts
  SNSTopicForNewAccountOktaAlert:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: "SNSTopicForNewAccountOktaAlert"
      Subscription:
        - Endpoint: !Ref OktaEmailAlert
          Protocol: email
  SNSTopicOktaPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicOktaPolicy
        Version: 2008-10-17
        Statement:
          - Sid: Access-Only-To-Master-Account
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource: !Ref 'SNSTopicForNewAccountOktaAlert'
            Condition:
              StringEquals:
                'AWS:SourceOwner': '848721808596'
      Topics:
      - !Ref SNSTopicForNewAccountOktaAlert