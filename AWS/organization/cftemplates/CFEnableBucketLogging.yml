AWSTemplateFormatVersion: 2010-09-09
Description: Enable bucket logging for S3 buckets within an account
Resources:
  S3EventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: New-S3-Event
      Description: 'Trigger a Lambda function anytime a new S3 bucket is created '
      EventPattern:
        source: 
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CreateBucket
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFEnableBucketLogging"
              - "Arn"
          Id: "LFEnableBucketLoggingProduction"

  LFEnableBucketLogging:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This function enables access logging on newly created S3 Buckets. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - LFEnableBucketLoggingRole
        - Arn
      Runtime: python3.7
      Timeout: '60'
      Code:
        ZipFile: |
          import boto3
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def enable_logging(bucketname,targetbucket):

              is_bucket_logging_enabled = False
              client = boto3.client('s3')
              try:
                  response = client.put_bucket_logging(
                      Bucket=bucketname,
                      BucketLoggingStatus={
                          'LoggingEnabled': {
                              'TargetBucket': targetbucket,
                              'TargetPrefix': bucketname
                          }
                      },
                  )
                  logger.info(response)
                  is_bucket_logging_enabled = True
              except Exception as e:
                  logger.error(e)
              finally:
                  return is_bucket_logging_enabled

          def lambda_handler(event, context):
              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']
                  regiondict = {'us-east-1':'e1', 'us-east-2':'e2', 'us-west-1':'w1', 'us-west-2':'w2'}

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['requestParameters']:
                      logger.warning('No requestParameters found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  if eventname == 'CreateBucket':
                      s3bucketname = detail['requestParameters']['bucketName']
                      logger.info(s3bucketname)
                  else:
                      logger.warning('Not supported action')

                  if s3bucketname:
                      #Extract account id where the bucket is being created
                      accountid = boto3.client('sts').get_caller_identity()['Account']

                      #bucket name of the s3 access logging bucket
                      targetbucket = "{0}-s3-access-logs-{1}".format(accountid,regiondict[region])

                      logger.info('accountid: ' + str(accountid))
                      logger.info('targetbucket: ' + str(targetbucket))

                      response = enable_logging(s3bucketname,targetbucket)
                      logger.info(response)

              except Exception as e:
                  logger.error('Error message: ' + str(e))
  LFEnableBucketLoggingLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFEnableBucketLogging
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFEnableBucketLogging
      RetentionInDays: 14
  PermissionForS3EventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFEnableBucketLogging
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - S3EventRule
          - Arn
  LFEnableBucketLoggingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFEnableBucketLoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 's3:PutBucketLogging'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'