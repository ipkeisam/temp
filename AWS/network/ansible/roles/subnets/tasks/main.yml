---
# roles/subnet/tasks/main.yml
# dependencies: vpc
# Create subnets in the VPC

- name: Create private subnets
  ec2_vpc_subnet:
    state:          "present"
    vpc_id:         "{{vpcid}}"
    cidr:           "{{item.value.cblk}}"
    az:             "{{item.value.az_name}}"
    region:         "{{aws_region}}"
    aws_access_key: "{{aws_access_key}}"  
    aws_secret_key: "{{aws_secret_key}}"
    resource_tags:
      Name:         "subnet{{item.value.cnt}}-{{item.value.sname}}-{{item.value.az_name}}-{{env_type}}"
      usage-id:     "{{subnet_usage_id}}"
      sec-profile:  "{{sec_profile}}"
      exp-date:     "{{exp_date}}"
      sd-period:    "{{sd_period}}"
      cloud-dependency: "{{cloud_dependency}}"
      atm-id:       "{{subnet_atm_id}}"
      p-id:         "{{subnet_p_id}}"
      cost-center:  "{{subnet_cost_center}}"
      env-type:     "{{subnet_env_type}}"
  register:  my_private_subnets
  with_dict:  "{{vpc_private_subnets}}"
  when: vpc_private_subnets is defined

#- debug: 
#    msg:  "{{my_private_subnets.results}}"

- name: set facts vpc private subnet dictionary
  set_fact:
    vpc_private_subnets_id: "{{vpc_private_subnets_id | default({}) | combine({item.subnet.tags.Name : item.subnet.id})}}"
  with_items: "{{my_private_subnets.results}}"
  when: my_private_subnets is defined

#- debug: 
#    msg:  "{{item.key}}: {{item.value}}"
#  with_dict:  "{{vpc_private_subnets_id}}"

- name: Create public subnets
  ec2_vpc_subnet:
    state:          "present"
    vpc_id:         "{{vpcid}}"
    cidr:           "{{item.value.cblk}}"
    az:             "{{item.value.az_name}}"
    region:         "{{aws_region}}"
    aws_access_key: "{{aws_access_key}}"  
    aws_secret_key: "{{aws_secret_key}}"
    resource_tags:
      Name:         "subnet{{item.value.cnt}}-{{item.value.sname}}-{{item.value.az_name}}-{{env_type}}"
      usage-id:     "{{subnet_usage_id}}"
      sec-profile:  "{{sec_profile}}"
      exp-date:     "{{exp_date}}"
      sd-period:    "{{sd_period}}"
      cloud-dependency: "{{cloud_dependency}}"
      atm-id:       "{{subnet_atm_id}}"
      p-id:         "{{subnet_p_id}}"
      cost-center:  "{{subnet_cost_center}}"
      env-type:     "{{subnet_env_type}}"
  register:  my_public_subnets
  with_dict:  "{{vpc_public_subnets}}"
  when: item.value !="" and public_facing

- name: set facts vpc public subnet dictionary
  set_fact:
    vpc_public_subnets_id: "{{vpc_public_subnets_id | default({}) | combine({item.subnet.tags.Name: item.subnet.id})}}"
    vpc_public_subnets_id_by_az: "{{vpc_public_subnets_id_by_az | default({}) | combine({item.subnet.id: item.subnet.availability_zone})}}"
  with_items: "{{my_public_subnets.results}}"
  when: public_facing

#- debug:
    #msg: vpc_public_subnets_id[subnet{{item.value.cnt}}-{{item.value.sname}}-{{item.value.az_name}}-{{env_type}}].1
 #   msg: "{{ vpc_public_subnets_id['subnet' + item.value.cnt + '-' + item.value.sname + '-' + item.value.az_name + '-' + env_type] }}"
 # with_dict:  "{{vpc_public_subnets}}"
 # when: item.value !="" and public_facing
