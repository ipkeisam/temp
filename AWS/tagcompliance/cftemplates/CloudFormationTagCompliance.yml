AWSTemplateFormatVersion: 2010-09-09
Description: Tag NonCompliance Stack
Parameters:
  ToEmailDistribution:
    Default: PDS_-_Platform_Design_services@capgroup.com
    Type: String
  CCEmailDistribution:
    Default: Technical_Core_team@capgroup.com
    Type: String
  ResourceLimit:
    Default: 25
    Type: Number
  AlertSchedule:
    Default: cron(0 15 ? * MON-FRI *)
    Type: String
  ConfigRuleAlreadyCreated:
    Default: false
    Type: String
    AllowedValues: 
      - true
      - false
  ConfigRecorderAlreadyCreated:
    Default: false
    Type: String
    AllowedValues: 
      - true
      - false
  LookupEventsStartDateSetHours:
    Default: 24
    Type: String
Conditions: 
  CreateConfigRule: !Equals [ !Ref ConfigRuleAlreadyCreated, false ]
  CreateConfigRecorder: !Equals [ !Ref ConfigRecorderAlreadyCreated, false ]
Resources:
  ConfigRecorder: 
    Type: AWS::Config::ConfigurationRecorder
    Condition: CreateConfigRecorder
    Properties: 
        Name: default
        RecordingGroup: 
          AllSupported: true
          IncludeGlobalResourceTypes: true
        RoleARN: 
            Fn::GetAtt: 
                - ConfigRecorderRole
                - Arn
  ConfigRecorderRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateConfigRecorder
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRole'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:GetBucketAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigBucket']]
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigBucket', /AWSLogs/,
                !Ref 'AWS::AccountId', /*]]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: config:Put*
            Resource: '*'
  DeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Condition: CreateConfigRecorder
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName: !Ref 'ConfigBucket'
  ConfigBucket:
    Type: AWS::S3::Bucket
    Condition: CreateConfigRecorder
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  AWSConfigRule:
    Type: 'AWS::Config::ConfigRule'
    Condition: CreateConfigRule
    Properties:
      ConfigRuleName: required-tags
      Description: Checks whether your resources have the tags that you specify.
      InputParameters:
        tag1Key: cost-center
        tag2Key: usage-id
        tag3Key: ppmc-id
        tag4Key: toc
        tag5Key: exp-date
        tag6Key: env-type
      Scope:
        ComplianceResourceTypes:
          - 'AWS::ACM::Certificate'
          - 'AWS::AutoScaling::AutoScalingGroup'
          - 'AWS::CodeBuild::Project'
          - 'AWS::DynamoDB::Table'
          - 'AWS::EC2::CustomerGateway'
          - 'AWS::EC2::Instance'
          - 'AWS::EC2::InternetGateway'
          - 'AWS::EC2::NetworkAcl'
          - 'AWS::EC2::NetworkInterface'
          - 'AWS::EC2::RouteTable'
          - 'AWS::EC2::SecurityGroup'
          - 'AWS::EC2::Subnet'
          - 'AWS::EC2::Volume'
          - 'AWS::EC2::VPC'
          - 'AWS::EC2::VPNConnection'
          - 'AWS::EC2::VPNGateway'
          - 'AWS::ElasticLoadBalancing::LoadBalancer'
          - 'AWS::ElasticLoadBalancingV2::LoadBalancer'
          - 'AWS::RDS::DBInstance'
          - 'AWS::RDS::DBSecurityGroup'
          - 'AWS::RDS::DBSnapshot'
          - 'AWS::RDS::DBSubnetGroup'
          - 'AWS::RDS::EventSubscription'
          - 'AWS::Redshift::Cluster'
          - 'AWS::Redshift::ClusterParameterGroup'
          - 'AWS::Redshift::ClusterSecurityGroup'
          - 'AWS::Redshift::ClusterSnapshot'
          - 'AWS::Redshift::ClusterSubnetGroup'
          - 'AWS::S3::Bucket'
      Source:
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS
  SFInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StepFunctionsInvoke
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource: '*'
  ScheduleCloudWatchTagComplianceRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Schedule that runs every Monday to Friday to check if any resources have missing required tags and sends out an email.
      Name: ScheduleTagComplianceRule
      ScheduleExpression: !Ref AlertSchedule
      State: ENABLED
      Targets:
        - Arn: !Ref SFSMNotifyTagsNonCompliance
          Id: StateMachineTargetId
          RoleArn: !GetAtt 
            - SFInvokeRole
            - Arn
  LFTagExtractCloudTrail:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: LFTagExtractCloudTrail
      Handler: index.handler
      Runtime: nodejs8.10
      Role: !GetAtt 
        - LFTagExtractCloudTrailRole
        - Arn
      Environment:
        Variables:
          Reduce_Hours:
            Ref: LookupEventsStartDateSetHours
      Timeout: 300
      Code:
        ZipFile: >
          const aws = require('aws-sdk');
          const cloudtrail = new aws.CloudTrail(); 
          exports.handler = (event, context, callback) => {
              event.startDate = new Date();
              event.endDate = new Date();
              event.finalArrayisEmpty = false;
              event.startDate.setHours(event.startDate.getHours() - process.env.Reduce_Hours);
              const setLookupAttributes = {
                  StartTime: event.startDate,
                  EndTime: event.endDate,
                  LookupAttributes: [{
                      AttributeKey: 'ResourceName',
                      AttributeValue: event.resourceIDArray.shift()
                  }],
                  MaxResults: 1
              };
              if (event.resourceIDArray.length > 0) {
                  event.has_elements = true;
              } else {
                  event.has_elements = false;
              }
              cloudtrail.lookupEvents(setLookupAttributes, (err, data) => {
                  if (err) {
                      return callback(err);
                  }
                  var resourceEventName = "";
                  var resourceUsername = "";   
                  if(data.Events.length > 0){
                    event.resourceEventName = data.Events[0].EventName;
                    event.resourceUsername = data.Events[0].Username;
                    event.AllResourceEventName.push(event.resourceEventName);
                    event.AllResourceUsername.push(event.resourceUsername);
                    event.finalResourceIDArray.push(event.staticResourceIDArray.shift());
                  } else{
                    event.staticResourceIDArray.shift();
                    event.resourceEventName = "Not Available";
                    event.resourceUsername = "Not Available";            
                  }
                  if(event.finalResourceIDArray.length === 0)
                    event.finalArrayisEmpty = true;
                  callback(null,event);
              });  
          };
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d5612bf0-f694-410f-b609-7e8c69092c11
  LFTagGetAccountAlias:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: LFTagGetAccountAlias
      Handler: index.handler
      Runtime: nodejs8.10
      Role: !GetAtt 
        - LFTagGetAccountAliasRole
        - Arn
      Timeout: 300
      Code:
        ZipFile: >
          var aws = require('aws-sdk');
          var iam = new aws.IAM();

          exports.handler = (event, context, callback) => {
              var params = {
              };
              iam.listAccountAliases(params, (err, data) => {
                  if (err) {
                      console.log(err, err.stack); 
                      event.accountname = "Not Available";
                      return callback(err);
                  } else {
                      event.accountname=data.AccountAliases[0];
                      console.log("account alias:" + data.AccountAliases[0]);
                      callback(null,event);
                  }
              });
          };
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d5612bf0-f694-410f-b609-7e8c69092c11
  LFTagVerifyCompliance:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: LFTagVerifyCompliance
      Handler: index.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          Resource_Limit:
            Ref: ResourceLimit
      Role: !GetAtt 
        - LFTagVerifyComplianceRole
        - Arn
      Timeout: 300
      Code:
        ZipFile: >
          const aws = require('aws-sdk'); 
          const config = new aws.ConfigService(); 
          var config_params = {
            ConfigRuleName: 'required-tags', /* required */
            ComplianceTypes: ['NON_COMPLIANT'],
            Limit: process.env.Resource_Limit
          };

          exports.handler = (event, context, callback) => {
              event.AllResourceEventName = [];
              event.AllResourceUsername = [];
              event.finalResourceIDArray = [];
              event.accountname = "Not Defined";
              config.getComplianceDetailsByConfigRule(config_params, (err, data) => {
                var resource_id = [];
                if (err) {
                    return callback(err);
                }
                else {
                  const resource_count = data.EvaluationResults.length;
                  for(var i=0; i < resource_count; i++){
                    var individual_resource = data.EvaluationResults[i].EvaluationResultIdentifier.EvaluationResultQualifier.ResourceId;
                    resource_id.push(individual_resource);
                  }
                  event.resourceIDArray = resource_id;
                  event.staticResourceIDArray = resource_id;
                  if (event.resourceIDArray.length > 0) {
                    event.has_elements = true;
                    event.no_resources_to_tag = false;                    
                  } else {
                    event.has_elements = false;
                    event.no_resources_to_tag = true;
                  }
                  callback(null,event);  
                }
              });  

          };
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d5612bf0-f694-410f-b609-7e8c69092c11
  LFTagSendEmail:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: LFTagSendEmail
      Handler: index.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          To_Email_Distribution:
            Ref: ToEmailDistribution
          CC_Email_Distribution:
            Ref: CCEmailDistribution
          ExecutionRegion:
            Ref: AWS::Region
          ExecutionAccountId:
            Ref: AWS::AccountId
      Role: !GetAtt 
        - LFTagSendEmailRole
        - Arn
      Timeout: 300
      Code:
        ZipFile: |
          var aws = require('aws-sdk');
          exports.handler = (event, context, callback) => {

              if (event.finalResourceIDArray.length === 0) {
                  callback(null,event);
              } else {
                  var sesregion="";
                  if (process.env.ExecutionRegion === "us-west-1") {
                      sesregion="us-west-2";
                  } else if (process.env.ExecutionRegion === "us-east-2") {
                      sesregion="us-east-1";
                  } else {
                      sesregion=process.env.ExecutionRegion;
                  }
                  var ses = new aws.SES({region: sesregion});
              
                  event.resources = "<b>AWS Account Alias: " + event.accountname + "<\/b><br><b>AWS Account: " + process.env.ExecutionAccountId + "<\/b><br><b>Region: " + process.env.ExecutionRegion + "<\/b><br>";
                  for(var i=0; i < event.finalResourceIDArray.length; i++){
                        event.resources =  event.resources + "<br>" 
                        + "ResourceName: " + event.finalResourceIDArray[i] + "<br>"
                        + "EventName: " + event.AllResourceEventName[i] + "<br>" 
                        + "Username: " + event.AllResourceUsername[i] + "<br>";
                  }
                  var params = {
                      Destination: {
                          ToAddresses: [process.env.To_Email_Distribution],
                          CcAddresses: [process.env.CC_Email_Distribution]
                      },
                      Message: {
                          Body: {
                              Html: { 
                                  Charset: "UTF-8",
                                  Data: event.resources
                              }
                          },
                          Subject: { Data: "Resource flagged for tagging non-compliance"
                          }
                      },
                      Source: "shnc@capgroup.com"
                  };
                  ses.sendEmail(params, (err, data) => {
                      if (err) {
                          console.log(err);
                          context.fail(err);
                      } else {
                          console.log(data);
                          callback(null,event);
                      }
                  });
              }
          };
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d5612bf0-f694-410f-b609-7e8c69092c11
  LFTagExtractCloudTrailRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFTagExtractCloudTrailPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - >-
                    arn:aws:logs:*:*:log-group:/aws/lambda/LFTagExtractCloudTrail:*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ec000b3a-a94d-4cf3-8b4a-a936d6ba360d
  LFTagVerifyComplianceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFTagVerifyCompliancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - >-
                    arn:aws:logs:*:*:log-group:/aws/lambda/LFTagVerifyCompliance:*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRole'
        - 'arn:aws:iam::aws:policy/AWSConfigUserAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 3349c1e0-afde-4347-9e1a-7a58f9d7e91d
  LFTagGetAccountAliasRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFTagGetAccountAliasPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:ListAccountAliases'
                Resource: '*'
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - >-
                    arn:aws:logs:*:*:log-group:/aws/lambda/LFTagGetAccountAlias:*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0e904d7b-9f94-431c-89a9-aaada16a6e66
  LFTagSendEmailRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFTagSendEmailPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/lambda/LFTagSendEmail:*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 6a21bef3-1b9a-4490-9451-69a779655aef
  LambdaStateMachineExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 766c7af1-5c82-488f-8807-b664f729125a
  SFSMNotifyTagsNonCompliance:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !GetAtt 
        - LambdaStateMachineExecutionRole
        - Arn
      DefinitionString: !Sub |-
        {
          "StartAt": "TaskExtractConfigNoncomplaintResources",
          "States": {
            "TaskExtractConfigNoncomplaintResources": {
              "Type": "Task",
              "Resource": "${LFTagVerifyCompliance.Arn}",
              "ResultPath": "$",
              "Next": "TaskCheckResourceArrayForMoreElements"
            },
            "TaskCheckResourceArrayForMoreElements": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.no_resources_to_tag",
                  "BooleanEquals": true,
                  "Next": "Success"
                },
                {
                  "Variable": "$.has_elements",
                  "BooleanEquals": true,
                  "Next": "TaskExtractCloudTrailResourceData"
                },
                {
                  "Variable": "$.finalArrayisEmpty",
                  "BooleanEquals": true,
                  "Next": "Success"
                }                
              ],
              "Default": "TaskGetAccountAlias"
            },
            "TaskExtractCloudTrailResourceData": {
              "Type": "Task",
              "Resource": "${LFTagExtractCloudTrail.Arn}",
              "Next": "wait_two_seconds"
            },
            "wait_two_seconds": {
              "Type": "Wait",
              "Seconds": 2,
              "Next": "TaskCheckResourceArrayForMoreElements"
            },
            "TaskGetAccountAlias": {
              "Type": "Task",
              "Resource": "${LFTagGetAccountAlias.Arn}",
              "Next": "TaskSendNotificationByEmail"
            },
            "TaskSendNotificationByEmail": {
              "Type": "Task",
              "Resource": "${LFTagSendEmail.Arn}",
              "Next": "Success"
            },
            "Success": {
              "Type": "Succeed"
            }
          }
        }
    Metadata:
      'AWS::CloudFormation::Designer':
        id: ffd6f53a-9ab8-41e2-9f84-5d59690ee591
