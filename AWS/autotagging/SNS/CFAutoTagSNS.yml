AWSTemplateFormatVersion: 2010-09-09
Description: Deploy resources (in Master account) for autotagging SNS automation
Resources:
  SNSEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Rule created to trigger a lambda function each time a repository is created
      EventPattern: 
        source:
        - aws.sns
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - sns.amazonaws.com
          eventName:
          - CreateTopic
      EventBusName: tagging
      Name: AutoTag-SNSTopic-Event
      State: ENABLED
      Targets: 
        - 
          Arn: 
            Fn::GetAtt:
            - LFAutotagSNS
            - Arn
          Id: LFAutotagSNSProduction
  LFAutotagSNSRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to create SNS Topic
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LFAutotagSNSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:TagResource
                  - sns:ListTagsForResource
                  - sns:ListTopics
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - organizations:ListTagsForResource
                Resource: "*"
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
  LFAutotagSNSLG:
    Type: AWS::Logs::LogGroup
    DependsOn: LFAutotagSNS
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - /aws/lambda/
            - Ref: LFAutotagSNS
      RetentionInDays: 14
  CWToLFSNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - LFAutotagSNS
          - Arn
      SourceArn:
        Fn::GetAtt:
          - SNSEventRule
          - Arn
  LFAutotagSNS:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function to tag SNS topic in response to CloudWatch Events
      Handler: index.lambda_handler
      Role: 
        Fn::GetAtt: 
          - LFAutotagSNSRole
          - Arn
      Runtime: python3.7
      Timeout: '60'
      Code:
        ZipFile: |
            from __future__ import print_function
            import json
            import os
            import boto3
            import logging
            import time
            import datetime

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            def set_sns_tags(credentials,sns_id,account_id):
              old_tags = {}
              new_tags = {}
              session = boto3.session.Session()
              sns_client=boto3.client(
                                  service_name='sns',
                                  aws_access_key_id=credentials['AccessKeyId'],
                                  aws_secret_access_key=credentials['SecretAccessKey'],
                                  aws_session_token=credentials['SessionToken']
                              )
              acctags = boto3.client('organizations').list_tags_for_resource(ResourceId=account_id)['Tags']
              mandatory_tags = {i['Key']: i['Value'] for i in acctags}
              
              try:
                old_tags=sns_client.list_tags_for_resource(ResourceArn=sns_id)['tags']
              except Exception as e:
                print(e)
              new_tags = {**mandatory_tags, **old_tags}
              print('Tagging resource ' +  )
    
              try:
                response=sns_client.tag_resource(ResourceArn=sns_id,tags=new_tags)
                print(response)
                return True
              except Exception as e:
                print(e)
                return False

            def assume_role(account_id, account_role):
              sts_client = boto3.client('sts')
              role_arn = 'arn:aws:iam::' + account_id + ':role/' + account_role
              assuming_role = True
              while assuming_role is True:
                  try:
                      assuming_role = False
                      assumedRoleObject = sts_client.assume_role(
                          RoleArn=role_arn,
                          RoleSessionName="NewAccountRole"
                      )
                  except botocore.exceptions.ClientError as e:
                      assuming_role = True
                      print(e)
                      print("Retrying...")
                      time.sleep(60)

              # From the response that contains the assumed role, get the temporary
              # credentials that can be used to make subsequent API calls
              return assumedRoleObject['Credentials']
        

            def lambda_handler(event, context):
              try:
                region=event['detail']['awsRegion']
                detail=event['detail']
                account_id = detail['userIdentity']['accountId']
                eventname=event['detail']['eventName']   
                logger.info('region: ' + str(region))
                logger.info('eventName: ' + str(eventname))
                logger.info('detail: ' + str(detail))

                if not detail['requestParameters']:
                  logger.warning('No requestParameters found')
                  if detail['errorCode']:
                    logger.error('errorCode: ' + detail['errorCode'])
                  if detail['errorMessage']:
                    logger.error('errorMessage: ' + detail['errorMessage'])
                  return False
                snsid=" "
                if account_id == '848721808596':
                  return False
       
                if eventname == 'CreateTopic':
                    snsid = detail['responseElements']['topicArn']
                    logger.info(snsid)
                else:
                  logger.warning('Not supported action')

                #Assume role of member account before tagging CodeCommit Repository
                account_role = 'OrganizationAccountAccessRole'
                credentials = assume_role(account_id, account_role)
        
                if snsid:
                    response = set_sns_tags(credentials,snsid,account_id)
                    return response
                else:
                  return False
              except Exception as e:
                logger.error('Error message: ' + str(e))
                return False
Outputs: {}