AWSTemplateFormatVersion: 2010-09-09
Description: Governance Portfolio
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Portfolio Information
        Parameters:
          - PorfolioName
          - PortfolioProvider
          - PorfolioDescription
      - Label:
          default: IAM Settings
        Parameters:
          - LaunchRoleName
          - LinkedRole1
          - LinkedRole2
          - CreateEndUsers
      - Label:
          default: Product Settings
        Parameters:
          - RepoRootURL
Parameters:
  PortfolioProvider:
    Type: String
    Description: Provider Name
    Default: IT Services
  PorfolioName:
    Type: String
    Description: Portfolio Name
    Default: Service Catalog Governance Reference Architecture
  PorfolioDescription:
    Type: String
    Description: Portfolio Description
    Default: >-
      Service Catalog Portfolio that contains governance products.
  LaunchRoleName:
    Type: String
    Description: >-
      Name of the launch constraint role for Governance products. leave this blank to
      create the role.
  LinkedRole1:
    Type: String
    Description: >-
      (Optional) The name of a role which can execute products in this
      portfolio.
  LinkedRole2:
    Type: String
    Description: >-
      (Optional) The name of a second role which can execute products in this
      portfolio.
  RepoRootURL:
    Type: String
    Description: S3 root url for the repository containing the product templates.
    Default: 'https://organization-cftemplates.s3-us-west-1.amazonaws.com/'
  CreateEndUsers:
    Type: String
    Description: >-
      Select Yes to Create the ServiceCatalogEndusers IAM group. No if you have
      already created the group
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
  ProductEmailAlert:
    Type: String
    Description: Email address where SNS notifications will be sent.
    Default: 'PDS_-_Platform_Design_services@capgroup.com'
  CGPrincipalID:
    Type: String
    Description: ARN of SNS Topic that receives notifications when any product is created.
    Default: 'o-1eax4cor5e'

Conditions:
  CreateLaunchConstraint: !Equals 
    - !Ref LaunchRoleName
    - ''
  CondCreateEndUsers: !Equals 
    - !Ref CreateEndUsers
    - 'Yes'
  CondLinkRole1: !Not 
    - !Equals 
      - !Ref LinkedRole1
      - ''
  CondLinkRole2: !Not 
    - !Equals 
      - !Ref LinkedRole2
      - ''
Resources:
  SCGovernanceportfolio:
    Type: 'AWS::ServiceCatalog::Portfolio'
    Properties:
      ProviderName: !Ref PortfolioProvider
      Description: !Ref PorfolioDescription
      DisplayName: !Ref PorfolioName
  addrole1:
    Type: 'AWS::ServiceCatalog::PortfolioPrincipalAssociation'
    Condition: CondLinkRole1
    Properties:
      PrincipalARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${LinkedRole1}'
      PortfolioId: !Ref SCGovernanceportfolio
      PrincipalType: IAM
  addrole2:
    Type: 'AWS::ServiceCatalog::PortfolioPrincipalAssociation'
    Condition: CondLinkRole2
    Properties:
      PrincipalARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${LinkedRole2}'
      PortfolioId: !Ref SCGovernanceportfolio
      PrincipalType: IAM
  LaunchConstraintRole:
    Type: 'AWS::CloudFormation::Stack'
    Condition: CreateLaunchConstraint
    Properties:
      TemplateURL: !Sub '${RepoRootURL}sc/sc-autotag-launchrole.yml'
      TimeoutInMinutes: 5
  stackServiceCatalogEndusers:
    Type: 'AWS::CloudFormation::Stack'
    Condition: CondCreateEndUsers
    Properties:
      TemplateURL: !Sub '${RepoRootURL}sc/sc-enduser-iam.yml'
      TimeoutInMinutes: 5
  LinkEndusersRole:
    Type: 'AWS::ServiceCatalog::PortfolioPrincipalAssociation'
    Properties:
      PrincipalARN: !If 
        - CondCreateEndUsers
        - !GetAtt 
          - stackServiceCatalogEndusers
          - Outputs.EndUserRoleArn
        - !Sub 'arn:aws:iam::${AWS::AccountId}:role/ServiceCatalogEndusers'
      PortfolioId: !Ref SCGovernanceportfolio
      PrincipalType: IAM
  LinkEndusersGroup:
    Type: 'AWS::ServiceCatalog::PortfolioPrincipalAssociation'
    Properties:
      PrincipalARN: !If 
        - CondCreateEndUsers
        - !GetAtt 
          - stackServiceCatalogEndusers
          - Outputs.EndUserGroupArn
        - !Sub 'arn:aws:iam::${AWS::AccountId}:group/ServiceCatalogEndusers'
      PortfolioId: !Ref SCGovernanceportfolio
      PrincipalType: IAM
  autotaggingproduct:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        PortfolioProvider: !Ref PortfolioProvider
        LaunchConstraintARN: !If 
          - CreateLaunchConstraint
          - !GetAtt 
            - LaunchConstraintRole
            - Outputs.LaunchRoleArn
          - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${LaunchRoleName}'
        PortfolioId: !Ref SCGovernanceportfolio
        RepoRootURL: !Ref RepoRootURL
        ServiceCatalogGovernanceTopic: !Ref ServiceCatalogGovernanceTopic
      TemplateURL: !Sub '${RepoRootURL}sc/sc-product-autotagging.yml'
      TimeoutInMinutes: 5
  ServiceCatalogGovernanceTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: "ServiceCatalogGovernanceTopic"
      Subscription:
        - Endpoint: !Ref ProductEmailAlert
          Protocol: email
  ServiceCatalogGovernanceTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ServiceCatalogGovernanceTopicPolicy
        Version: 2008-10-17
        Statement:
          - Sid: Access-Only-To-Master-Account
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource: !Ref 'ServiceCatalogGovernanceTopic'
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Ref 'AWS::AccountId'
          - Sid: Publish-Access-to-member-accounts
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 'SNS:Publish'
            Resource: !Ref 'ServiceCatalogGovernanceTopic'
            Condition:
              StringEquals:
                'aws:PrincipalOrgID': !Ref CGPrincipalID
      Topics:
      - !Ref ServiceCatalogGovernanceTopic
Outputs:
  EndUserRoleArn:
    Condition: CondCreateEndUsers
    Value: !GetAtt 
      - stackServiceCatalogEndusers
      - Outputs.EndUserRoleArn
  EndUserGroupArn:
    Condition: CondCreateEndUsers
    Value: !GetAtt 
      - stackServiceCatalogEndusers
      - Outputs.EndUserGroupArn
  EndUserGroupName:
    Condition: CondCreateEndUsers
    Value: !GetAtt 
      - stackServiceCatalogEndusers
      - Outputs.EndUserGroupName
  LaunchConstraintRoleARN:
    Condition: CreateLaunchConstraint
    Value: !GetAtt 
      - LaunchConstraintRole
      - Outputs.LaunchRoleArn
  LaunchConstraintRoleName:
    Condition: CreateLaunchConstraint
    Value: !GetAtt 
      - LaunchConstraintRole
      - Outputs.LaunchRoleName
  autotaggingproductId:
    Value: !GetAtt 
      - autotaggingproduct
      - Outputs.ProductId
