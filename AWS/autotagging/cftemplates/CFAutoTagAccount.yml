AWSTemplateFormatVersion: 2010-09-09
Description: ''
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Prerequisites
        Parameters:
          - IsCloudTrailEnabled
    ParameterLabels:
      IsCloudTrailEnabled:
        default: >-
          Is CloudTrail already enabled in this region? CloudTrail is a
          requirement for Cloudwatch Events. If not enabled, please enable
          CloudTrail before proceeding.
Parameters:
  AccountCostCenter:
    Default: na  
    Type: String
  AccountPPMCId:
    Default: na  
    Type: String
  AccountTOC:
    Default: na
    Type: String
  AccountUsageId:
    Default: na
    Type: String
  AccountExpDate:
    Default: na  
    Type: String
  AccountEnvType:
    Default: dev
    AllowedValues:
      - ftdev
      - lab
      - dev
      - qa
      - prod
    Type: String
  AccountSDPeriod:
    Default: na  
    Type: String
  IsCloudTrailEnabled:
    Description: Specify if CloudTrail is enabled in the current region
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
Conditions:
  CreateResources: !Equals 
    - !Ref IsCloudTrailEnabled
    - 'Yes'
Resources:
  EC2EventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new EC2 resource is created (EC2
        instance, EBS volume, EBS Snapshot or AMI)
      EventPattern:
        source: 
          - aws.ec2
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - CreateVolume
            - RunInstances
            - CreateImage
            - CreateSnapshot
      Name: New-EC2Resource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFEC2AutoTag"
              - "Arn"
          Id: "LFEC2AutoTagProduction"
  S3EventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: 'Trigger a Lambda function anytime a new S3 bucket is created '
      EventPattern:
        source: 
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CreateBucket
      Name: New-S3Resource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFS3AutoTag"
              - "Arn"
          Id: "LFS3AutoTagProduction"
  RDSEventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new RDS resource is created (RDS
        DB instance, cluster, cluster snapshot, DB snapshotEBS Snapshot or AMI)
      EventPattern:
        source: 
          - aws.rds
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - rds.amazonaws.com
          eventName:
            - CreateDBCluster
            - CreateDBClusterSnapshot
            - CreateDBSnapshot
            - CreateDBInstance
      Name: New-RDSResource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFRDSAutoTag"
              - "Arn"
          Id: "LFRDSAutoTagProduction"
  LFRDSAutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags RDS Resources in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - RDSLambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def set_rds_tags(rdsname): 
              old_tags = {}
              new_tags = {}
              rdsclient = boto3.client('rds')
              mandatory_tags = {
                              "usage-id":os.environ['UsageId'],
                              "toc":os.environ['TOC'],
                              "ppmc-id":os.environ['PPMCId'],
                              "cost-center":os.environ['CostCenter'],
                              "exp-date":os.environ['ExpDate'],
                              "env-type":os.environ['EnvType'],
                              "sd-period":os.environ['SDPeriod']
              }
              #print(mandatory_tags)
              try:
                  old = rdsclient.list_tags_for_resource(ResourceName=rdsname)
                  old_tags = {i['Key']: i['Value'] for i in old['TagList']}
                  #print(old_tags)
              except Exception as e:
                  print(e)
              new_tags = {**old_tags, **mandatory_tags}
              #print(new_tags)
              print('Tagging resource ' + rdsname)
              try:
                  response = rdsclient.add_tags_to_resource(
                      ResourceName=rdsname,
                      Tags=[
                          {'Key': str(k), 'Value': str(v)} for k, v in new_tags.items()
                      ]
                  )
                  print(response)
                  return True
              except Exception as e:
                  print(e)
                  return False

          def lambda_handler(event, context):

              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['responseElements']:
                      logger.warning('No responseElements found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  if eventname == 'CreateDBCluster':
                      rdsid = detail['responseElements']['dBClusterArn']
                      logger.info(rdsid)

                  elif eventname == 'CreateDBClusterSnapshot':
                      rdsid = detail['responseElements']['dBClusterSnapshotArn']
                      logger.info(rdsid)

                  elif eventname == 'CreateDBSnapshot':
                      rdsid = detail['responseElements']['dBSnapshotArn']
                      logger.info(rdsid)

                  elif eventname == 'CreateDBInstance':
                      rdsid = detail['responseElements']['dBInstanceArn']
                      logger.info(rdsid)
                  else:
                      logger.warning('Not supported action')

                  if rdsid:
                      response = set_rds_tags(rdsid)
                      return response
                  else:
                      return False
              except Exception as e:
                  logger.error('Something went wrong: ' + str(e))
                  return False
  LFRDSAutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFRDSAutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFRDSAutoTag
  PermissionForRDSEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFRDSAutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - RDSEventRule
          - Arn
  LFEC2AutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags EC2 Resources in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - EC2LambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):

          ids = []              
          try:
              region = event['region']
              detail = event['detail']
              eventname = detail['eventName']

              logger.info('region: ' + str(region))
              logger.info('eventName: ' + str(eventname))
              logger.info('detail: ' + str(detail))

              if not detail['responseElements']:
                  logger.warning('No responseElements found')
                  if detail['errorCode']:
                      logger.error('errorCode: ' + detail['errorCode'])
                  if detail['errorMessage']:
                      logger.error('errorMessage: ' + detail['errorMessage'])
                  return False

              ec2 = boto3.resource('ec2')

              if eventname == 'CreateVolume':
                  ids.append(detail['responseElements']['volumeId'])
                  logger.info(ids)

              elif eventname == 'RunInstances':
                  items = detail['responseElements']['instancesSet']['items']
                  for item in items:
                      ids.append(item['instanceId'])
                  logger.info(ids)
                  logger.info('number of instances: ' + str(len(ids)))

                  base = ec2.instances.filter(InstanceIds=ids)

                  #loop through the instances
                  for instance in base:
                      for vol in instance.volumes.all():
                          ids.append(vol.id)
                      for eni in instance.network_interfaces:
                          ids.append(eni.id)

              elif eventname == 'CreateImage':
                  ids.append(detail['responseElements']['imageId'])
                  logger.info(ids)

              elif eventname == 'CreateSnapshot':
                  ids.append(detail['responseElements']['snapshotId'])
                  logger.info(ids)
              else:
                  logger.warning('Not supported action')

              if ids:
                  for resourceid in ids:
                      print('Tagging resource ' + resourceid)
                  ec2.create_tags(Resources=ids, Tags=[{'Key': 'usage-id', 'Value': os.environ['UsageId']}, {'Key': 'toc', 'Value': os.environ['TOC']}, {'Key': 'ppmc-id', 'Value': os.environ['PPMCId']}, {'Key': 'cost-center', 'Value': os.environ['CostCenter']}, {'Key': 'exp-date', 'Value': os.environ['ExpDate']}, {'Key': 'env-type', 'Value': os.environ['EnvType']}, {'Key': 'sd-period', 'Value': os.environ['SDPeriod']} ])

              logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\n')
              return True
          except Exception as e:
              logger.error('Something went wrong: ' + str(e))
              return False
  LFEC2AutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFEC2AutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFEC2AutoTag
      RetentionInDays: 14
  PermissionForEC2EventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFEC2AutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - EC2EventRule
          - Arn
  LFS3AutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags S3 Buckets in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - S3LambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          import logging
          import time
          import datetime
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def set_bucket_tags(bucketname): 
              old_tags = {}
              new_tags = {}
              s3client = boto3.client('s3')
              mandatory_tags = {
                              "usage-id":os.environ['UsageId'],
                              "toc":os.environ['TOC'],
                              "ppmc-id":os.environ['PPMCId'],
                              "cost-center":os.environ['CostCenter'],
                              "exp-date":os.environ['ExpDate'],
                              "env-type":os.environ['EnvType'],
                              "sd-period":os.environ['SDPeriod']
              }
              #print(mandatory_tags)
              try:
                  old = s3client.get_bucket_tagging(Bucket=bucketname)
                  old_tags = {i['Key']: i['Value'] for i in old['TagSet']}
                  #print(old_tags)
              except Exception as e:
                  print(e)
              new_tags = {**old_tags, **mandatory_tags}
              #print(new_tags)
              print('Tagging resource ' + bucketname)
              try:
                  response = s3client.put_bucket_tagging(
                      Bucket=bucketname,
                      Tagging={
                          'TagSet': [{'Key': str(k), 'Value': str(v)} for k, v in new_tags.items()]
                      }
                  )
                  print(response)
                  return True
              except Exception as e:
                  print(e)
                  return False
          def lambda_handler(event, context):
              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']
                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['requestParameters']:
                      logger.warning('No requestParameters found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  if eventname == 'CreateBucket':
                      s3bucketname = detail['requestParameters']['bucketName']
                      logger.info(s3bucketname)
                  else:
                      logger.warning('Not supported action')

                  if s3bucketname:
                      response = set_bucket_tags(s3bucketname)
                      return response
                  else:
                      return False
              except Exception as e:
                  logger.error('Error message: ' + str(e))
                  return False
  LFS3AutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFS3AutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFS3AutoTag
      RetentionInDays: 14
  PermissionForS3EventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFS3AutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - S3EventRule
          - Arn
  EFSEventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new EFS resource is created 
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - elasticfilesystem.amazonaws.com
          eventName:
            - CreateFileSystem
      Name: New-EFSResource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFEFSAutoTag"
              - "Arn"
          Id: "LFEFSAutoTagProduction"
  LFEFSAutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags EFS Resources in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - EFSLambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def set_efs_tags(efsname): 
              old_tags = {}
              new_tags = {}
              efsclient = boto3.client('efs')
              mandatory_tags = {
                              "usage-id":os.environ['UsageId'],
                              "toc":os.environ['TOC'],
                              "ppmc-id":os.environ['PPMCId'],
                              "cost-center":os.environ['CostCenter'],
                              "exp-date":os.environ['ExpDate'],
                              "env-type":os.environ['EnvType'],
                              "sd-period":os.environ['SDPeriod']
              }
              #print(mandatory_tags)
              try:
                  old = efsclient.describe_tags(FileSystemId=efsname)
                  old_tags = {i['Key']: i['Value'] for i in old['Tags']}
                  #print(old_tags)
              except Exception as e:
                  print(e)
              new_tags = {**old_tags, **mandatory_tags}
              #print(new_tags)
              print('Tagging resource ' + efsname)
              try:
                  response = efsclient.create_tags(
                      FileSystemId=efsname,
                      Tags=[
                          {'Key': str(k), 'Value': str(v)} for k, v in new_tags.items()
                      ]
                  )
                  print(response)
                  return True
              except Exception as e:
                  print(e)
                  return False

          def lambda_handler(event, context):

              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['responseElements']:
                      logger.warning('No responseElements found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  if eventname == 'CreateFileSystem':
                      efsid = detail['responseElements']['fileSystemId']
                      logger.info(efsid)

                  else:
                      logger.warning('Not supported action')

                  if efsid:
                      response = set_efs_tags(efsid)
                      return response
                  else:
                      return False
              except Exception as e:
                  logger.error('Something went wrong: ' + str(e))
                  return False
  LFEFSAutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFEFSAutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFEFSAutoTag
      RetentionInDays: 14
  PermissionForEFSEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFEFSAutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - EFSEventRule
          - Arn
  EFSLambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: EFSLambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'elasticfilesystem:CreateTags'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  EC2LambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: EC2LambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'ec2:CreateTags'
                  - 'ec2:Describe*'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  S3LambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: S3LambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 's3:PutBucketTagging'
                  - 's3:GetBucketTagging'
                  - 's3:ListBucket'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  RDSLambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: RDSLambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'rds:AddTagsToResource'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  CWLogEventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new CWLog resource is created (Cloud Watch Log Group)
      EventPattern:
        source: 
          - aws.logs
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - logs.amazonaws.com
          eventName:
            - CreateLogGroup
      Name: New-CWLogResource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFCWLogAutoTag"
              - "Arn"
          Id: "LFCWLogAutoTagProduction"
  LFCWLogAutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags CWLog Resources in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - CWLogLambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):

              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['requestParameters']:
                      logger.warning('No responseElements found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  cwlogs = boto3.client('logs')

                  if eventname == 'CreateLogGroup':
                      cwlogsid = detail['requestParameters']['logGroupName']
                      logger.info(cwlogsid)

                  else:
                      logger.warning('Not supported action')

                  if cwlogsid:
                      print('Tagging resource ' + cwlogsid)
                      cwlogs.tag_log_group(logGroupName=cwlogsid, tags={'usage-id': os.environ['UsageId'], 'toc': os.environ['TOC'], 'ppmc-id': os.environ['PPMCId'], 'cost-center': os.environ['CostCenter'], 'exp-date': os.environ['ExpDate'], 'env-type': os.environ['EnvType'], 'sd-period': os.environ['SDPeriod']})

                  logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\n')
                  return True
              except Exception as e:
                  logger.error('Something went wrong: ' + str(e))
                  return False
  LFCWLogAutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFCWLogAutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFCWLogAutoTag
      RetentionInDays: 14
  PermissionForCWLogEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFCWLogAutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - CWLogEventRule
          - Arn
  CWLogLambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CWLogLambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'logs:TagLogGroup'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  ELBEventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new ELB resource is created (Elastic Load Balnacer - Netowrk or Application)
      EventPattern:
        source: 
          - aws.elasticloadbalancing
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - elasticloadbalancing.amazonaws.com
          eventName:
            - CreateLoadBalancer
      Name: New-ELBResource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFELBAutoTag"
              - "Arn"
          Id: "LFELBAutoTagProduction"
  LFELBAutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags ELB Resources in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - ELBLambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):

              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['responseElements']:
                      logger.warning('No responseElements found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  elbv2 = boto3.client('elbv2')
                  elb = boto3.client('elb')

                  if eventname == 'CreateLoadBalancer':
                    try:
                        loadBalancers = detail['responseElements']['loadBalancers']
                        for lb in loadBalancers:
                          elbid = lb['loadBalancerArn']
                          logger.info(elbid)
                        if elbid:
                            print('Tagging resource ' + elbid)
                            elbv2.add_tags(ResourceArns=[elbid], Tags=[{'Key': 'usage-id', 'Value': os.environ['UsageId']}, {'Key': 'toc', 'Value': os.environ['TOC']}, {'Key': 'ppmc-id', 'Value': os.environ['PPMCId']}, {'Key': 'cost-center', 'Value': os.environ['CostCenter']}, {'Key': 'exp-date', 'Value': os.environ['ExpDate']}, {'Key': 'env-type', 'Value': os.environ['EnvType']}, {'Key': 'sd-period', 'Value': os.environ['SDPeriod']} ])                      

                    except Exception as e:
                        logger.info(' This should be a classic load balancer')
                        loadBalancerName = detail['requestParameters']['loadBalancerName']
                        if loadBalancerName:
                            print('Tagging resource ' + loadBalancerName)
                            elb.add_tags(LoadBalancerNames=[loadBalancerName], Tags=[{'Key': 'usage-id', 'Value': os.environ['UsageId']}, {'Key': 'toc', 'Value': os.environ['TOC']}, {'Key': 'ppmc-id', 'Value': os.environ['PPMCId']}, {'Key': 'cost-center', 'Value': os.environ['CostCenter']}, {'Key': 'exp-date', 'Value': os.environ['ExpDate']}, {'Key': 'env-type', 'Value': os.environ['EnvType']}, {'Key': 'sd-period', 'Value': os.environ['SDPeriod']} ])                      
                  else:
                      logger.warning('Not supported action')

                  logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\n')
                  return True
              except Exception as e:
                  logger.error('Something went wrong: ' + str(e))
                  return False
  LFELBAutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFELBAutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFELBAutoTag
  PermissionForELBEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFELBAutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - ELBEventRule
          - Arn
  ELBLambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ELBLambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'elasticloadbalancing:AddTags'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  DYDBTEventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new DynamoDB Table is created
      EventPattern:
        source: 
          - aws.dynamodb
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - dynamodb.amazonaws.com
          eventName:
            - CreateTable
      Name: New-DYDBTResource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFDYDBTAutoTag"
              - "Arn"
          Id: "LFDYDBTAutoTagProduction"
  LFDYDBTAutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags DYDBT Resources in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - DYDBTLambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          from botocore.exceptions import ClientError
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):

              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['responseElements']:
                      logger.warning('No responseElements found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  dydb = boto3.client('dynamodb')

                  if eventname == 'CreateTable':
                      logger.info(eventname + 'exists')
                      dydbid = detail['responseElements']['tableDescription']['tableArn']
                      logger.info(dydbid)

                  else:
                      logger.warning('Not supported action')

                  if dydbid:
                      time.sleep(30)
                      print('Tagging resource ' + dydbid)
                      dydb.tag_resource(ResourceArn=dydbid, Tags=[{'Key': 'usage-id', 'Value': os.environ['UsageId']}, {'Key': 'toc', 'Value': os.environ['TOC']}, {'Key': 'ppmc-id', 'Value': os.environ['PPMCId']}, {'Key': 'cost-center', 'Value': os.environ['CostCenter']}, {'Key': 'exp-date', 'Value': os.environ['ExpDate']}, {'Key': 'env-type', 'Value': os.environ['EnvType']}, {'Key': 'sd-period', 'Value': os.environ['SDPeriod']} ])                      

                  logger.info(' Remaining time (ms): ' + str(context.get_remaining_time_in_millis()) + '\n')
                  return True
              except ClientError as ce:
                  if ce.response['Error']['Code'] == 'ResourceNotFoundException':
                      time.sleep(30)
                      dydb.tag_resource(ResourceArn=dydbid, Tags=[{'Key': 'usage-id', 'Value': os.environ['UsageId']}, {'Key': 'toc', 'Value': os.environ['TOC']}, {'Key': 'ppmc-id', 'Value': os.environ['PPMCId']}, {'Key': 'cost-center', 'Value': os.environ['CostCenter']}, {'Key': 'exp-date', 'Value': os.environ['ExpDate']}, {'Key': 'env-type', 'Value': os.environ['EnvType']}, {'Key': 'sd-period', 'Value': os.environ['SDPeriod']} ])                      
                  else:
                      logger.error('Something went wrong: ' + str(e))
                      return False
  LFDYDBTAutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFDYDBTAutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFDYDBTAutoTag
  PermissionForDYDBTEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFDYDBTAutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - DYDBTEventRule
          - Arn
  DYDBTLambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: DYDBTLambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'dynamodb:TagResource'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  ECSEventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new ECS resource is created (ECS
        Tasks, service, task definition, cluster, ec2 instances)
      EventPattern:
        source: 
          - aws.ecs
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - ecs.amazonaws.com
          eventName:
            - CreateService
            - RunTask
            - RegisterTaskDefinition
            - CreateCluster
            - RunInstances
      Name: New-ECSResource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFECSAutoTag"
              - "Arn"
          Id: "LFECSAutoTagProduction"
  LFECSAutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags ECS Resources in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - ECSLambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def set_ecs_tags(ecsarn): 
              resp = False
              old_tags = {}
              new_tags = {}
              ecsclient = boto3.client('ecs')
              mandatory_tags = {
                              "usage-id":os.environ['UsageId'],
                              "toc":os.environ['TOC'],
                              "ppmc-id":os.environ['PPMCId'],
                              "cost-center":os.environ['CostCenter'],
                              "exp-date":os.environ['ExpDate'],
                              "env-type":os.environ['EnvType'],
                              "sd-period":os.environ['SDPeriod']
              }
              #print(mandatory_tags)
              for resourceid in ecsarn:
                  try:
                      old = ecsclient.list_tags_for_resource(resourceArn=resourceid)
                      old_tags = {i['key']: i['value'] for i in old['tags']}
                      #print(old_tags)
                  except Exception as e:
                      print(e)

                  new_tags = {**old_tags, **mandatory_tags}
                  #print(new_tags)
                  print('Tagging resource ' + resourceid)
                  try:
                      response = ecsclient.tag_resource(
                          resourceArn=resourceid,
                          tags=[
                              {'key': str(k), 'value': str(v)} for k, v in new_tags.items()
                          ]
                      )
                      print(response)
                  except Exception as e:
                      print(e)
              return resp

          def lambda_handler(event, context):

              ecsid = [] 
              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  if not detail['responseElements']:
                      logger.warning('No responseElements found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  if eventname == 'RunTask':
                      items = detail['responseElements']['tasks']
                      for item in items:
                          ecsid.append(item['taskArn'])
                      logger.info(ecsid)

                  elif eventname == 'CreateService':
                      ecsid.append(detail['responseElements']['service']['serviceArn'])
                      logger.info(ecsid)

                  elif eventname == 'RegisterTaskDefinition':
                      ecsid.append(detail['responseElements']['taskDefinition']['taskDefinitionArn'])
                      logger.info(ecsid)

                  elif eventname == 'CreateCluster':
                      ecsid.append(detail['responseElements']['cluster']['clusterArn'])
                      logger.info(ecsid)

                  elif eventname == 'RunInstances':
                      items = detail['responseElements']['instances']
                      for item in items:
                          ecsid.append(item['instancesArn'])
                      logger.info(ecsid)
                  else:
                      logger.warning('Not supported action')

                  if ecsid:
                      response = set_ecs_tags(ecsid)
                      return response
                  else:
                      return False

              except Exception as e:
                  logger.error('Something went wrong: ' + str(e))
                  return False
  LFECSAutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFECSAutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFECSAutoTag
  PermissionForECSEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFECSAutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - ECSEventRule
          - Arn
  ECSLambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ECSLambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'ecs:TagResource'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
  LambdaEventRule:
    Type: 'AWS::Events::Rule'
    Condition: CreateResources
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new lambda Table is created
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - lambda.amazonaws.com
          eventName:
            - CreateFunction20150331
      Name: New-LambdaResource-Event
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFLambdaAutoTag"
              - "Arn"
          Id: "LFLambdaAutoTagProduction"
  LFLambdaAutoTag:
    Type: 'AWS::Lambda::Function'
    Condition: CreateResources
    Properties:
      Environment:
        Variables:
          CostCenter: !Ref AccountCostCenter
          PPMCId: !Ref AccountPPMCId
          TOC: !Ref AccountTOC
          UsageId: !Ref AccountUsageId
          ExpDate: !Ref AccountExpDate
          EnvType: !Ref AccountEnvType
          SDPeriod: !Ref AccountSDPeriod
      Description: This function tags Lambda functions in response to Cloudwatch Events. 
      Handler: index.lambda_handler 
      Role: !GetAtt 
        - LFLambdaAutoTagRole
        - Arn
      Runtime: python3.7 
      Timeout: '60'
      Code:
        ZipFile: |
          from __future__ import print_function
          from botocore.exceptions import ClientError
          import json
          import os
          import boto3
          import logging
          import time
          import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def set_lambda_tags(lambdaname): 
              old_tags = {}
              new_tags = {}
              lambdaclient = boto3.client('lambda')
              mandatory_tags = {
                              "usage-id":os.environ['UsageId'],
                              "toc":os.environ['TOC'],
                              "ppmc-id":os.environ['PPMCId'],
                              "cost-center":os.environ['CostCenter'],
                              "exp-date":os.environ['ExpDate'],
                              "env-type":os.environ['EnvType'],
                              "sd-period":os.environ['SDPeriod']
              }
              #print(mandatory_tags)
              # try:
              #     old = lambdaclient.list_tags(Resource=lambdaname)
              #     old_tags = {str(k): str(v) for k,v in Tags.items()}
              #     print(old_tags)
              # except Exception as e:
              #     print(e)
              new_tags = {**mandatory_tags}
              print(new_tags)
              print('Tagging resource ' + lambdaname)
              try:
                  response = lambdaclient.tag_resource(
                      Resource=lambdaname,
                      Tags={str(k): str(v) for k, v in new_tags.items()}
                  )
                  print(response)
                  return True
              except Exception as e:
                  print(e)
                  return False

          def lambda_handler(event, context):

              try:
                  region = event['region']
                  detail = event['detail']
                  eventname = detail['eventName']

                  logger.info('region: ' + str(region))
                  logger.info('eventName: ' + str(eventname))
                  logger.info('detail: ' + str(detail))

                  #lambdaclient = boto3.client('lambda')

                  if not detail['responseElements']:
                      logger.warning('No responseElements found')
                      if detail['errorCode']:
                          logger.error('errorCode: ' + detail['errorCode'])
                      if detail['errorMessage']:
                          logger.error('errorMessage: ' + detail['errorMessage'])
                      return False

                  if eventname == 'CreateFunction20150331':
                      logger.info(eventname + 'exists')
                      lambdaid = detail['responseElements']['functionArn']
                      logger.info(lambdaid)

                  else:
                      logger.warning('Not supported action')

                  if lambdaid:
                      response = set_lambda_tags(lambdaid)
                      return response
                  else:
                      return False

                  # if lambdaid:
                  #     print('Tagging resource ' + lambdaid)
                  #     lambdaclient.tag_resource(Resource=lambdaid, Tags={'usage-id': os.environ['UsageId'], 'toc': os.environ['TOC'], 'ppmc-id': os.environ['PPMCId'], 'cost-center': os.environ['CostCenter'], 'exp-date': os.environ['ExpDate'], 'env-type': os.environ['EnvType'], 'sd-period': os.environ['SDPeriod']})                      

              except ClientError as ce:
                  logger.error('Something went wrong: ' + str(e))
                  return False
  LFLambdaAutoTagLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFLambdaAutoTag
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFLambdaAutoTag
  PermissionForLambdaEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFLambdaAutoTag
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - LambdaEventRule
          - Arn
  LFLambdaAutoTagRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateResources
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LFLambdaAutoTagPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923097000
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 'lambda:TagResource'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
Outputs: {}