AWSTemplateFormatVersion: 2010-09-09
Description: Deploy resources (in Master account) for autotagging DatabaseMigrationService automation
Resources:
  DMSEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Rule created to trigger a lambda function each time a DMS resources is created
      EventPattern: 
        source:
        - aws.dms
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - dms.amazonaws.com
          eventName:
          - CreateEndpoint
          - CreateEventSubscription
          - CreateReplicationInstance
          - CreateReplicationSubnetGroup
          - CreateReplicationTask
      EventBusName: tagging
      Name: AutoTag-DMS-Event
      State: ENABLED
      Targets: 
        - 
          Arn: 
            Fn::GetAtt:
            - LFAutotagDMS
            - Arn
          Id: LFAutotagDMSProduction
  LFAutotagDMSRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to create DatabaseMigrationService resources
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LFAutotagDMSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dms:ListTagsForResource
                  - dms:AddTagsToResource
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - organizations:ListTagsForResource
                Resource: "*"
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
  LFAutotagDMSLG:
    Type: AWS::Logs::LogGroup
    DependsOn: LFAutotagDMS
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - /aws/lambda/
            - Ref: LFAutotagDMS
      RetentionInDays: 14
  CWToLFDMSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - LFAutotagDMS
          - Arn
      SourceArn:
        Fn::GetAtt:
          - DMSEventRule
          - Arn
  LFAutotagDMS:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function to tag DatabaseMigrationService resources in response to CloudWatch Events
      Handler: index.lambda_handler
      Role: 
        Fn::GetAtt: 
          - LFAutotagDMSRole
          - Arn
      Runtime: python3.7
      Timeout: '60'
      Code:
        ZipFile: |
            from __future__ import print_function
            import json
            import os
            import boto3
            import logging
            import time
            import datetime

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            def set_dms_tags(credentials, dmsname, account_id):
              session = boto3.session.Session()
              dms_client=boto3.client(
                                  service_name='dms',
                                  aws_access_key_id=credentials['AccessKeyId'],
                                  aws_secret_access_key=credentials['SecretAccessKey'],
                                  aws_session_token=credentials['SessionToken']
                              )
              acc_tags = boto3.client('organizations').list_tags_for_resource(ResourceId=account_id)['Tags']
                                     
              try:
                old_tags=dms_client.list_tags_for_resource(ResourceArn=dmsname)['TagList']
              except Exception as e:
                print(e)
            
              acc={i['Key']:i['Value'] for i in acc_tags}
              old={i['Key']:i['Value'] for i in old_tags}
              d={}
              d1={}
              required_tags=[]
              for i in old:
                  if i in acc:
                      d[i]=old[i]
              for i in acc:
                  if i not in d:
                      d[i]=acc[i]
              for i in old:
                  if i not in d:
                      d[i]=old[i]

              for i in d:
                  d1['Key']=i
                  d1['Value']=d[i]
                  required_tags.append(d1)
                  d1={}
              print('Tagging resource ' + dmsname)
    
              try:
                response=dms_client.add_tags_to_resource(ResourceArn=dmsname,Tags=required_tags)
                print(response)
                return True
              except Exception as e:
                print(e)
                return False

            def assume_role(account_id, account_role):
              sts_client = boto3.client('sts')
              role_arn = 'arn:aws:iam::' + account_id + ':role/' + account_role
              assuming_role = True
              while assuming_role is True:
                  try:
                      assuming_role = False
                      assumedRoleObject = sts_client.assume_role(
                          RoleArn=role_arn,
                          RoleSessionName="NewAccountRole"
                      )
                  except botocore.exceptions.ClientError as e:
                      assuming_role = True
                      print(e)
                      print("Retrying...")
                      time.sleep(60)

              return assumedRoleObject['Credentials']
        

            def lambda_handler(event, context):
              try:
                region=event['detail']['awsRegion']
                detail=event['detail']
                account_id = detail['userIdentity']['accountId']
                eventname=event['detail']['eventName']   
                logger.info('region: ' + str(region))
                logger.info('eventName: ' + str(eventname))
                logger.info('detail: ' + str(detail))
                
                if account_id == '848721808596':
                  return False
       
                if eventname=='CreateEndpoint':
                  dmsname = detail['responseElements']['endpoint']['endpointArn']
                  logger.info(dmsname)
                
                elif eventname == 'CreateReplicationInstance':
                  dmsname = detail['responseElements']['replicationInstance']['replicationInstanceArn']
                  logger.info(dmsname)

                elif eventname == 'CreateEventSubscription':
                  dmsname = 'arn:aws:dms:'+detail['awsRegion']+':'+detail['userIdentity']['accountId']+':es:'+detail['responseElements']['eventSubscription']['custSubscriptionId']
                  logger.info(dmsname)

                elif eventname == 'CreateReplicationSubnetGroup':
                  dmsname = 'arn:aws:dms:'+detail['awsRegion']+':'+detail['userIdentity']['accountId']+':subgrp:'+detail['responseElements']['replicationSubnetGroup']['replicationSubnetGroupIdentifier']
                  logger.info(dmsname)

                elif eventname == 'CreateReplicationTask':
                  dmsname = detail['responseElements']['replicationTask']['replicationTaskArn']
                  logger.info(dmsname)

                else:
                  logger.warning('Not supported action')

                account_role = 'OrganizationAccountAccessRole'
                credentials = assume_role(account_id, account_role)
        
                if dmsname:
                  response = set_dms_tags(credentials, dmsname, account_id)
                  return response
                else:
                  return False
              except Exception as e:
                logger.error('Error message: ' + str(e))
                return False
Outputs: {}