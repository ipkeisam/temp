---
AWSTemplateFormatVersion: 2010-09-09
Description: Deploy resources (in Master account) for autotagging SecretsManager automation
Resources:
  SecretsManagerEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Rule created to trigger a lambda function each time a Hosted zone is created
      EventPattern: 
        source:
        - aws.secretsmanager
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - secretsmanager.amazonaws.com
          eventName:
          - CreateSecret
      EventBusName: tagging
      Name: AutoTag-SecretsManager-Event
      State: ENABLED
      RoleArn:
        Fn::GetAtt:
          - LFAutoTagSecretsManagerRole
          - Arn
      Targets: 
        - 
          Arn: 
            Fn::GetAtt:
            - LFAutoTagSecretsManager
            - Arn
          Id: LFAutoTagSecretsManagerProduction
  LFAutoTagSecretsManagerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to create SecretsManager Hosted zones
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AutoTagSecretsManagerLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
              - Sid: VisualEditor1
                Effect: Allow
                Action:
                  - 'secretsmanager:ListSecrets'
                  - 'secretsmanager:TagResource'
                  - 'secretsmanager:UpdateSecret'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:CreateSecret'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'organizations:ListTagsForResource'
                Resource: "*"
              - Sid: AssumeOrgRole
                Effect: Allow
                Action: 'sts:AssumeRole'
                Resource: 'arn:aws:iam::*:role/OrganizationAccountAccessRole'
  LFAutoTagSecretsManagerLG:
    Type: AWS::Logs::LogGroup
    DependsOn: LFAutoTagSecretsManager
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Join:
          - ''
          - - /aws/lambda/
            - Ref: LFAutoTagSecretsManager
      RetentionInDays: 14
  CWToLFSecretsManagerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName:
        Fn::GetAtt:
          - LFAutoTagSecretsManager
          - Arn
      SourceArn:
        Fn::GetAtt:
          - SecretsManagerEventRule
          - Arn
  LFAutoTagSecretsManager:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function to tag SecretsManager Hosted Zones
      Handler: index.lambda_handler
      Role: 
        Fn::GetAtt: 
          - LFAutoTagSecretsManagerRole
          - Arn
      Runtime: python3.7
      Timeout: '60'
      Code:
          ZipFile: |
            from __future__ import print_function
            import json
            import os
            import boto3
            import logging
            import time
            import datetime

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            def set_secretmanager_tags(credentials,user_id,account_id):
              old_tags = {}
              new_tags = {}
              session = boto3.session.Session()
              client=boto3.client(
                                  service_name='secretsmanager',
                                  aws_access_key_id=credentials['AccessKeyId'],
                                  aws_secret_access_key=credentials['SecretAccessKey'],
                                  aws_session_token=credentials['SessionToken']
                              )

              acctags = boto3.client('organizations').list_tags_for_resource(ResourceId=account_id)['Tags']
              mandatory_tags = {i['Key']: i['Value'] for i in acctags}
              
 
              try:
                old = client.describe_secret(SecretId=user_id)['Tags']
                old_tags = {i['Key']: i['Value'] for i in old}
                print(old_tags)
              except Exception as e:
                print(e)
              new_tags = {**mandatory_tags,**old_tags}
              print(new_tags)
    
              response = client.tag_resource(SecretId=user_id,
              Tags=[
                          {'Key': str(k), 'Value': str(v)} for k, v in new_tags.items()
                      ]
                  )
            
            def assume_role(account_id, account_role):
              sts_client = boto3.client('sts')
              role_arn = 'arn:aws:iam::' + account_id + ':role/' + account_role
              assuming_role = True
              while assuming_role is True:
                  try:
                      assuming_role = False
                      assumedRoleObject = sts_client.assume_role(
                          RoleArn=role_arn,
                          RoleSessionName="NewAccountRole"
                      )
                  except botocore.exceptions.ClientError as e:
                      assuming_role = True
                      print(e)
                      print("Retrying...")
                      time.sleep(60)

              # From the response that contains the assumed role, get the temporary
              # credentials that can be used to make subsequent API calls
              return assumedRoleObject['Credentials']

            def lambda_handler(event, context):
              try:
                detail = event['detail']
                region=detail['awsRegion']
                account_id= detail['userIdentity']['accountId']
                eventname = detail['eventName']
                user_id = detail['requestParameters']['name']
                logger.info('eventName: ' + str(eventname))

                print(eventname)
                print(region)
                print(account_id)
                logger.info('detail: ' + str(detail))
                print(detail)
                logger.info('name:' + str(user_id))
                print(user_id)

                if account_id == '848721808596':
                  return False

                if eventname=='CreateSecret':
                  user_id=detail['requestParameters']['name']
                  logger.info('name:' + str(user_id))
                else:
                  logger.warning('Not supported action')
                
                #Assume role of member account before tagging CodeCommit Repository
                account_role = 'OrganizationAccountAccessRole'
                credentials = assume_role(account_id, account_role)

                if user_id:
                  response=set_secretmanager_tags(credentials,user_id,account_id)
                  print("going to fn secretsmanager")
                  return response
                else:   
                  return False
              except Exception as e:
                logger.error('Something went wrong: ' + str(e))
                return False

   
    