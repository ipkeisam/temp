---
# default labels
openshift_aws_atm_id: BB00000085
openshift_aws_ppmc_id: "80502" 
openshift_aws_cost_center: "524068"

# default instance type to use ( minimum for OCP )
openshift_aws_ec2_control_instance_type: t2.medium
openshift_aws_ec2_master_instance_type: t2.xlarge
openshift_aws_ec2_app_instance_type: t2.xlarge
openshift_aws_ec2_infra_instance_type: t2.xlarge

# default AMI parameter 
openshift_aws_ami_copy_wait: True
openshift_aws_ami_encrypt: True
openshift_aws_ami_name: ocp-rhel7-rootenc
openshift_aws_ami_desc: RHEL-7.x_HVM_GA
# RedHat 7.5 GA private image
openshift_aws_ami_rhel_private_us_west_1: ami-e4716784
openshift_aws_ami_rhel_private_us_east_1: ami-0d70a070

openshift_aws_ami_rhel_private: ""

openshift_aws_wait_for_ssh: True

openshift_aws_vpc_name: "{{ openshift_aws_clusterid }}"

# termination protection
openshift_aws_ec2_termination_protection: yes

# volume id
etcd_volume_id: ""
origin_volume_id: ""

openshift_aws_ec2_master_user_data: |
          #!/bin/bash
          #
        

openshift_aws_ec2_control_user_data: |
          #!/bin/bash
          #


openshift_aws_ec2_app_user_data: |
          #!/bin/bash
          #


openshift_aws_ec2_infra_user_data: |
          #!/bin/bash
          #


# define the data volume to be mounted
openshift_aws_control_instance_root_volume:
- device_name: /dev/sda1
  volume_size: 40
  volume_type: gp2
  delete_on_termination: yes

openshift_aws_master_instance_root_volume:
- device_name: /dev/sda1
  volume_size: 60
  volume_type: gp2
  delete_on_termination: yes

openshift_aws_master_instance_docker_volume:
  docker:
    device_name: /dev/sdb
    volume_size: "{{ master_docker_vol_size | default('50', true) }}"
    volume_type: gp2
    encrypted: True
    delete_on_termination: yes
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"

openshift_aws_master_instance_etcd_volume:
  etcd:
    device_name: /dev/sdc
    volume_size: 10
    volume_type: gp2
    encrypted: True
    delete_on_termination: yes
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"

openshift_aws_infra_instance_root_volume:
- device_name: /dev/sda1
  volume_size: 40
  volume_type: gp2
  delete_on_termination: yes

openshift_aws_infra_instance_docker_volume:
  docker:
    device_name: /dev/sdb
    volume_size: "{{ infra_docker_vol_size | default('100', true) }}"
    volume_type: gp2
    encrypted: True
    delete_on_termination: yes
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"

openshift_aws_infra_instance_origin_volume:
  origin:
    device_name: /dev/sdc
    volume_size: 20
    volume_type: gp2
    encrypted: True
    delete_on_termination: yes
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"

openshift_aws_app_instance_root_volume:
- device_name: /dev/sda1
  volume_size: 30
  volume_type: gp2
  delete_on_termination: yes

openshift_aws_app_instance_docker_volume:
  docker:
    device_name: /dev/sdb
    volume_size: "{{ app_docker_vol_size | default('100', true) }}"
    volume_type: gp2
    encrypted: True
    delete_on_termination: yes
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"

openshift_aws_app_instance_origin_volume:
  origin:    
    device_name: /dev/sdc
    volume_size: 20
    volume_type: gp2
    encrypted: True
    delete_on_termination: yes
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"

# build the security groups dict
openshift_aws_node_security_groups:
  control:
    name: "{{ openshift_aws_clusterid }}_ocp_control_sg"
    desc: "{{ openshift_aws_clusterid }} OCP control SG"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 10.0.0.0/8
    rules_egress:
    - proto: all
      from_port: 0
      to_port: 65535   
      cidr_ip: 0.0.0.0/0                    
  master:
    name: "{{ openshift_aws_clusterid }}_ocp_master_sg"
    desc: "{{ openshift_aws_clusterid }} OCP master SG"
    rules:
    - proto: tcp
      from_port: 443
      to_port: 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_master_sg"   
    - proto: tcp
      from_port: 8053
      to_port: 8053
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"      
    - proto: udp
      from_port: 8053
      to_port: 8053
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    - proto: tcp
      from_port: 443
      to_port: 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    - proto: tcp
      from_port: 443
      to_port: 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_elb_int_master_sg"
    - proto: tcp
      from_port: 443
      to_port: 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_elb_master_sg"            
    rules_egress:
    - proto: all
      from_port: 0
      to_port: 65535   
      cidr_ip: 0.0.0.0/0                                
  app:
    name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    desc: "{{ openshift_aws_clusterid }} OCP app node SG"
    rules:
    - proto: tcp
      ports: 10250
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    - proto: udp
      ports:
        - 4789
        - 500
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    - proto: 51
      from_port: -1 
      to_port: -1 
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    - proto: 50
      from_port: -1 
      to_port: -1 
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    - proto: tcp
      from_port: 383
      to_port: 383
      cidr_ip: 10.18.121.95/32
    - proto: tcp
      from_port: 383
      to_port: 383
      cidr_ip: 10.18.121.96/32  
    rules_egress:
    - proto: all
      from_port: 0
      to_port: 65535   
      cidr_ip: 0.0.0.0/0                                                           
  infra:
    name: "{{ openshift_aws_clusterid }}_ocp_infra_sg"
    desc: "{{ openshift_aws_clusterid }} OCP infra node SG"
    rules:
    - proto: tcp
      ports:
        - 80
        - 443
        - 1936
      group_name: "{{ openshift_aws_clusterid}}_ocp_elb_router_sg"
    rules_egress:
    - proto: all
      from_port: 0
      to_port: 65535   
      cidr_ip: 0.0.0.0/0                          
  etcd:
    name: "{{ openshift_aws_clusterid }}_ocp_etcd_sg"
    desc: "{{ openshift_aws_clusterid }} OCP etcd SG"
    rules:
    - proto: tcp
      ports:
        - 2379
        - 2380
      group_name: "{{ openshift_aws_clusterid }}_ocp_etcd_sg"
    - proto: tcp
      from_port: 2379
      to_port: 2379
      group_name: "{{ openshift_aws_clusterid }}_ocp_master_sg"
    rules_egress:
    - proto: all
      from_port: 0
      to_port: 65535   
      cidr_ip: 0.0.0.0/0      
  elb_master:
    name: "{{ openshift_aws_clusterid }}_ocp_elb_master_sg"
    desc: "{{ openshift_aws_clusterid }} OCP ELB Master SG"
    rules:
    - proto: tcp
      ports:
        - 443
      cidr_ip: 10.0.0.0/8
    rules_egress:
    - proto: tcp
      from_port: 443
      to_port: 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_master_sg"
  elb_int_master:
    name: "{{ openshift_aws_clusterid }}_ocp_elb_int_master_sg"   
    desc: "{{ openshift_aws_clusterid }} OCP ELB Internal Master SG"
    rules:
    - proto: tcp
      from_port: 443
      to_port: 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_app_sg"
    - proto: tcp
      from_port: 443
      to_port: 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_master_sg"
    rules_egress:
    - proto: tcp
      from_port: 443
      to_port: 443  
      group_name: "{{ openshift_aws_clusterid }}_ocp_master_sg"
  elb_router:
    name: "{{ openshift_aws_clusterid}}_ocp_elb_router_sg"
    desc: "{{ openshift_aws_clusterid}} OCP ELB router SG"
    rules:
    - proto: tcp
      from_port: 443
      to_port: 443
      cidr_ip: 10.0.0.0/8           
    - proto: tcp
      from_port: 80
      to_port: 80
      cidr_ip: 10.0.0.0/8        
    rules_egress:
    - proto: tcp
      ports:
        - 80
        - 1936
        - 443
      group_name: "{{ openshift_aws_clusterid }}_ocp_infra_sg"

#ocp variables to fetch master and infra instances to attach to ELBs
openshift_master_ec2_instances: []
openshift_infra_ec2_instances: []    
openshift_alb_subnets: []

# OCP Load Balancers
openshift_aws_elb:
  openshift_aws_router_elb:
    router_elb:
      #name: "OCP-Router-ELB"
      name: "{{ aws_router_elb_name }}"
      state: present
      region: "{{ openshift_aws_region }}"
      scheme: internet-facing
      idle_timeout: 60
      subnets: "{{ openshift_elb_externalsubnets }}"
      listeners:
        - protocol: tcp
          load_balancer_port: 443
          instance_port: 443
          instance_protocol: tcp
        - protocol: tcp
          load_balancer_port: 80
          instance_port: 80
          instance_protocol: tcp
      health_check:
        ping_protocol: HTTP
        ping_port: 1936
        response_timeout: 2
        interval: 5
        unhealthy_threshold: 2
        healthy_threshold: 2
        ping_path: "/healthz"
      security_group_ids: "{{ openshift_aws_ocp_elb_router_sg_id }}"
  
  openshift_aws_internalrouter_elb:
    internalrouter_elb:
      #name: "OCP-InternalRouter-ELB"
      name: "{{ aws_internalrouter_elb_name }}"
      state: present
      region: "{{ openshift_aws_region }}"
      scheme: internal
      idle_timeout: 60
      subnets: "{{ openshift_elb_internalsubnets }}"
      listeners:
        - protocol: tcp
          load_balancer_port: 443
          instance_port: 443
          instance_protocol: tcp
        - protocol: tcp
          load_balancer_port: 80
          instance_port: 80
          instance_protocol: tcp
      health_check:
        ping_protocol: HTTP
        ping_port: 1936
        response_timeout: 2
        interval: 5
        unhealthy_threshold: 2
        healthy_threshold: 2
        ping_path: "/healthz"
      security_group_ids: "{{ openshift_aws_ocp_elb_router_sg_id }}"

  openshift_aws_master_elb:
    master_elb:
      #name: "OCP-Master-ELB"
      name: "{{ aws_master_elb_name }}"
      state: present
      region: "{{ openshift_aws_region }}"
      scheme: internal
      idle_timeout: 60
      subnets: "{{ openshift_elb_internalsubnets }}"
      listeners:
        - protocol: tcp
          load_balancer_port: 443
          instance_port: 443
          instance_protocol: tcp
      health_check:
        ping_protocol: HTTPS
        ping_port: 443
        response_timeout: 2
        interval: 5
        unhealthy_threshold: 2
        healthy_threshold: 2
        ping_path: "/healthz"
      security_group_ids: "{{ openshift_aws_ocp_elb_master_sg_id }}"

  openshift_aws_internalmaster_elb:
    internalmaster_elb:
      #name: "OCP-InternalMaster-ELB"
      name: "{{ aws_internalmaster_elb_name }}"
      state: present
      region: "{{ openshift_aws_region }}"
      scheme: internal
      idle_timeout: 60
      subnets: "{{ openshift_elb_internalsubnets }}"
      listeners:
        - protocol: tcp
          load_balancer_port: 443
          instance_port: 443
          instance_protocol: tcp
      health_check:
        ping_protocol: HTTPS
        ping_port: 443
        response_timeout: 2
        interval: 5
        unhealthy_threshold: 2
        healthy_threshold: 2
        ping_path: "/healthz"
      security_group_ids: "{{ openshift_aws_ocp_elb_int_master_sg_id }}"   

#end of ELB

openshift_iam_user_policy:
  ec2-user:
    username: "ocp-ec2-user"
    policyname: ocp-ec2-policy
    description: policy to access ec2 instances for ocp
    policy: ec2_policy.json

openshift_iam_user:
  ec2-user:
    name: "ocp-ec2-user"
  s3-user:
    name: "ocp-s3-user"
    

# OCP policy for S3 user and EC2 user
openshift_aws_policy:
  ec2-policy:
    name: ocp-ec2-policy
    description: policy to access ec2 instances for ocp
    policy: ec2_policy.json

  s3-policy:
    name: ocp-s3-policy
    description: policy to access s3 bucket 
    policy: s3_policy.json

# default openshift resource tagging
openshift_aws_resource_tags:
  Name: "{{ openshift_aws_resource_type }}"
  usage-id: "{{ openshift_aws_atm_id }}"
  cost-center: "{{ openshift_aws_cost_center }}"
  sec-profile: normal
  exp-date: 99-00-9999
  sd-period: na
  p-id: "{{ openshift_aws_ppmc_id }}"
  env-type: "{{ openshift_aws_env_type }}"
  cloud-dependency: cloudonly
  app-type: "{{ openshift_aws_resource_type }}"
  site: aws

