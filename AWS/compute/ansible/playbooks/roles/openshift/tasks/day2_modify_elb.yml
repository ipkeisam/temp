---

# gather facts about vpc
- name: query vpc
  ec2_vpc_net_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      'tag:Name': "{{ openshift_aws_clusterid }}"
  register: vpcout

- name: print out vpc id
  #Ansible 2.6
  #debug: var=vpcout.vpcs[0].vpc_id
  #Ansible 2.4 
  debug: var=vpcout.vpcs[0].id
    
# gather facts about any security group with a tag key Name and value
- ec2_group_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      group-name: "{{ openshift_aws_clusterid }}_ocp_elb_master_sg"
  register: elb_master_sg

- name: print out elb master security group id
  debug: var=elb_master_sg.security_groups[0].group_id

- name: set the security id
  set_fact:
    openshift_aws_ocp_elb_master_sg_id: "{{ elb_master_sg.security_groups[0].group_id }}"

- ec2_group_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      group-name: "{{ openshift_aws_clusterid }}_ocp_elb_int_master_sg"
  register: elb_int_master_sg

- name: print out internal elb master security group id
  debug: var=elb_int_master_sg.security_groups[0].group_id

- name: set the security id
  set_fact:
    openshift_aws_ocp_elb_int_master_sg_id: "{{ elb_master_sg.security_groups[0].group_id }}"

- ec2_group_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      group-name: "{{ openshift_aws_clusterid}}_ocp_elb_router_sg"
  register: elb_router_sg

- name: print out internal elb master security group id
  debug: var=elb_int_master_sg.security_groups[0].group_id

- name: set the security id
  set_fact:
    openshift_aws_ocp_elb_router_sg_id: "{{ elb_router_sg.security_groups[0].group_id }}"

- name: Retrieve name of elb
  set_fact:
    tmp_loadbalancer_name: "{{ item.value.name }}"
  with_dict: "{{ openshift_aws_elb[elb_type] }}"

- name: output name of elb
  debug:
    msg: "{{ tmp_loadbalancer_name }}"

#Gather facts about elb
- name: Fetch elb information
  ec2_elb_facts:
    region: "{{ openshift_aws_region }}"
    names: "{{ tmp_loadbalancer_name }}"
  register: loadbalancer_output

- name: Output list of instances
  debug:
    msg: "{{ loadbalancer_output.elbs.0.instances }}"

- name: aws cli to remove instances from load balancer
  shell: aws elb deregister-instances-from-load-balancer --load-balancer-name {{ tmp_loadbalancer_name }} --instances {{ item }}
  with_items: "{{ loadbalancer_output.elbs.0.instances }}"

# fecth the ec2 information
- name: fetch information on master ec2 instances
  ec2_instance_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      'tag:app-type': "{{ aws_masterhost_type }}"
      instance-state-name: running
      key-name: "{{ openshift_aws_ssh_key_name }}"
      #Ansible 2.6
      #vpc-id: "{{ vpcout.vpcs[0].vpc_id }}"
      #Ansible 2.4
      vpc-id: "{{ vpcout.vpcs[0].id }}"
  register: ec2_master_output

- name: build a list of master instance ids
  set_fact:
    openshift_master_ec2_instances: "{{ openshift_master_ec2_instances }} + [ '{{ item.instance_id }}' ]"
  with_items: "{{ ec2_master_output.instances }}"

- name: print out master ec2 instances
  debug: var=openshift_master_ec2_instances

- name: fetch information on infra ec2 instances
  ec2_instance_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      'tag:app-type': "{{ aws_infrahost_type }}"
      instance-state-name: running
      key-name: "{{ openshift_aws_ssh_key_name }}"
      #Ansible 2.6
      #vpc-id: "{{ vpcout.vpcs[0].vpc_id }}"
      #Ansible 2.4
      vpc-id: "{{ vpcout.vpcs[0].id }}"
  register: ec2_infra_output

- name: build a list of infra instance ids
  set_fact:
    openshift_infra_ec2_instances: "{{ openshift_infra_ec2_instances }} + [ '{{ item.instance_id }}' ]"
  with_items: "{{ ec2_infra_output.instances }}"

- name: print out infra ec2 instances
  debug: var=openshift_infra_ec2_instances

#required variable input - elb_name
- name: modify or create a ELB
#  elb_application_lb:
  ec2_elb_lb:
    name: "{{ item.value.name }}"
    state: present
    region: "{{ item.value.region }}"
    subnets: "{{ item.value.subnets }}"
    listeners: "{{ item.value.listeners}}"
    health_check: "{{ item.value.health_check }}"
    scheme: "{{ item.value.scheme }}"
    instance_ids: "{{ openshift_master_ec2_instances if 'Master' in item.value.name else openshift_infra_ec2_instances }}"
    tags: "{{ openshift_aws_resource_tags }}"
    security_group_ids: "{{ item.value.security_group_ids }}"
  with_dict: "{{ openshift_aws_elb[elb_type] }}"