---

# query for instance information that is being worked on
- name: query instance info to be worked on
  ec2_instance_facts:
    region: "{{ openshift_aws_region }}"
    filters:   
      instance-state-name: running
      "private-dns-name": "{{ openshift_instance_name }}"
  register: instancesout
  retries: 20
  delay: 3
  until: instancesout|length > 0

- name: query for volume info
  ec2_vol_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      "attachment.device": "{{ device_name | default('/dev/sdb', true) }}"  
      "attachment.instance-id": "{{ instancesout.instances[0].instance_id }}"
      "attachment.status": attached
  register: volumeout
  when: new_disk

- name: print out 
  debug: var=volumeout.volumes[0].id
  when: new_disk

- name: detaching old volume
  ec2_vol:
    region: "{{ openshift_aws_region }}"
    id: "{{ volumeout.volumes[0].id}}"
    instance: None
  when: new_disk

- name: deleting old volume
  ec2_vol:
    region: "{{ openshift_aws_region }}"
    id: "{{ volumeout.volumes[0].id}}"
    state: absent
  when: new_disk
  
# pause for 10 secs before proceeding 
- name: pause a bit before continuing
  pause:
    seconds: 10
  
# create new volume 
- name: create new volume
  ec2_vol:
    encrypted: True
    tags: "{{ openshift_aws_resource_tags }}"
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"
    volume_size: "{{ new_vol_size | default(100) }}"
    volume_type: gp2
    state: present
    region: "{{ openshift_aws_region }}"
    zone: "{{ instancesout.instances[0].placement.availability_zone }}"
  register: vol_out

# attach new volume
- name: attach new volume
  ec2_vol:
    instance: "{{ instancesout.instances[0].instance_id }}"
    id: "{{ vol_out.volume_id }}"
    region: "{{ openshift_aws_region }}"
    device_name: "{{ device_name | default('/dev/sdb', true) }}" 
    delete_on_termination: yes     


