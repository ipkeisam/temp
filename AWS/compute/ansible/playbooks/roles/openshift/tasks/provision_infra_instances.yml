---

# query info for reference ( vpcout, subnetout, securitygroupout )
#- include_tasks: query_vpc_subnet_sg.yml

# query for the availability zone to create the volume
- name:
  set_fact:
    vol_az: "{{ item.az }}"
  with_items: "{{ openshift_aws_admin_subnet }}"

# create origin volume 
- name: create origin volume
  ec2_vol:
    encrypted: true
    tags: "{{ openshift_aws_resource_tags }}"
    kms_key_id: "{{ item.value.kms_key_id }}"
    volume_size: "{{ item.value.volume_size }}"
    volume_type: "{{ item.value.volume_type }}"
    state: present
    region: "{{ openshift_aws_region }}"
    zone: "{{ vol_az }}"
  register: vol_out
  with_dict: "{{ openshift_aws_infra_instance_origin_volume }}"

# set the volume id to be use in user data when provisioning the ec2
#- name: set the origin volume id 
#  set_fact:
#    origin_volume_id: "{{ vol_out.results[0].volume_id | regex_replace('-', '') }}"

- name: create the infra instances 
  ec2:
    region: "{{ openshift_aws_region }}"
    key_name: "{{ openshift_aws_ssh_key_name }}"
    instance_type: "{{ openshift_aws_ec2_infra_instance_type }}"
    vpc_subnet_id: "{{ item.subnet }}"
    image: "{{ openshift_aws_rootenc_ami }}"
    volumes: "{{ openshift_aws_infra_instance_root_volume }}"
    termination_protection: "{{ openshift_aws_ec2_termination_protection }}"
    group: 
      - "{{ openshift_aws_clusterid }}_ocp_control_sg"
      - "{{ openshift_aws_clusterid }}_ocp_app_sg"
      - "{{ openshift_aws_clusterid }}_ocp_infra_sg"
#    user_data: "{{ openshift_aws_ec2_infra_user_data }}"
    private_ip: "{{ openshift_aws_ec2_infra_private_ip | default(omit) }}"          
    wait: yes
    count: "{{ item.count }}"
    instance_tags: "{{ openshift_aws_resource_tags }}"
  register: infra_hosts
  with_items: "{{ openshift_aws_admin_subnet }}" 

- debug:
    msg: "{{ infra_hosts }}"

- name: fetch newly created instance
  ec2_instance_facts:
    region: "{{ openshift_aws_region }}"
    filters:
#      "tag:Name": "{{ openshift_aws_resource_type }}"
      "tag:app-type": "{{ openshift_aws_resource_type }}"      
      instance-state-name: running
      subnet-id: "{{ item.subnet }}"
      availability-zone: "{{ item.az }}"
      instance-id: "{{ infra_hosts.results[0].instance_ids }}"
  register: instancesout
  with_items: "{{ openshift_aws_admin_subnet }}"  
  retries: 20
  delay: 3
  until: instancesout|length > 0

- debug:
    msg: "{{ instancesout.results[0].instances[0].instance_id }}"

# create eth1 and attach to the instances
- name: create eth1 for infra instances
  ec2_eni:
    device_index: 1
    description: ocp-infra-host-eth1
    region: "{{ openshift_aws_region }}"
    subnet_id: "{{ item.subnet }}"
    instance_id: "{{ instancesout.results[0].instances[0].instance_id }}"
    private_ip_address: "{{ openshift_aws_ec2_infra_private_ip_eth1 | default(omit) }}"    
    attached: true
    delete_on_termination: true
    security_groups:
      - "{{ openshift_aws_clusterid }}_ocp_infra_sg"
    state: present
  register: infra_hosts_eth1
  with_items: "{{ openshift_aws_cluster_subnet }}"
  when: openshift_aws_dual_nic

# attach origin volume
- name: attach origin volume
  ec2_vol:
    instance: "{{ instancesout.results[0].instances[0].instance_id }}"
    id: "{{ vol_out.results[0].volume_id }}"
    region: "{{ openshift_aws_region }}"
    device_name: "{{ item.value.device_name }}"
    delete_on_termination: "{{ item.value.delete_on_termination }}"     
  with_dict: "{{ openshift_aws_infra_instance_origin_volume }}"

# create docker volume and attach to instance
- name: create docker volume and attach to instance
  ec2_vol:
    instance: "{{ instancesout.results[0].instances[0].instance_id }}"
    encrypted: true
    tags: "{{ openshift_aws_resource_tags }}"
    kms_key_id: "{{ item.value.kms_key_id }}"
    delete_on_termination: "{{ item.value.delete_on_termination }}"
    volume_size: "{{ item.value.volume_size }}"
    volume_type: "{{ item.value.volume_type }}"
    state: present
    device_name: "{{ item.value.device_name }}"
    region: "{{ openshift_aws_region }}"
  with_dict: "{{ openshift_aws_infra_instance_docker_volume }}"

# the following tasks tags all related resources attached to the infra instances
- name: tag eth0 network interfaces
  ec2_tag:
    region: "{{ openshift_aws_region}}"
    resource: "{{ item.instances[0].network_interfaces[0].network_interface_id }}"
    state: present
    tags: "{{ openshift_aws_resource_tags }}"
  with_items: "{{ instancesout.results }}"

- name: tag eth1 network interfaces
  ec2_tag:
    region: "{{ openshift_aws_region}}"
    resource: "{{ item.interface.id }}"
    state: present
    tags: "{{ openshift_aws_resource_tags }}"
  with_items: "{{ infra_hosts_eth1.results }}"
  when: openshift_aws_dual_nic

- name: tag all attached root volume
  ec2_tag:
    region: "{{ openshift_aws_region}}"
    resource: "{{ item.instances[0].block_device_mappings[0].ebs.volume_id }}"
    state: present
    tags: "{{ openshift_aws_resource_tags }}"
  with_items: "{{ instancesout.results }}"

# - name: add the newly created infra hosts ip to ocp_hosts.ini file
#   lineinfile:
#     path: "ocp_hosts.ini"
#     insertafter: '^\[infra\]'
#     line: "{{ item.instances[0].private_dns_name }} ansible_connection=ssh ansible_user=ec2-user"
#     state: present
#   with_items: "{{ instancesout.results }}"

- name: add the newly created control host ip to ocp_hosts.ini file
  lineinfile:
    path: "ocp_hosts.ini"
    insertafter: '^\[infra\]'
    line: "{{ item.instances[0].private_dns_name }} openshift_node_labels=\"{'region': 'infra','logging-infra-fluentd': 'true','{{ outcold_cluster_tag_key }}': 'cluster'}\" openshift_ip={{ item.instances[0].private_ip_address }} openshift_hostname={{ item.instances[0].private_dns_name }}"
    state: present
  with_items: "{{ instancesout.results }}"
