---

- name: export config file before making changes
  shell: oc get cm {{ node }} -n openshift-node -o yaml > /tmp/{{ node }}.yaml

- name: get timestamp from the system
  shell: "date +%Y-%m-%d%H-%M-%S"
  register: tstamp

- name: backup the file before making changes
  become: yes
  copy:
    src: /tmp/{{ node }}.yaml
    dest: /tmp/{{ node }}.yaml.{{ tstamp.stdout[10:] }}
    remote_src: yes
    backup: yes  
    
# image-gc-high-threshold
- name: test if image-gc-high-threshold parameter exist
  command: grep "image-gc-high-threshold:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check1_out

- name: update image-gc-high-threshold
  block:
    - command: sed -i '/image-gc-high-threshold/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      image-gc-high-threshold:"
        line: "      - '{{ new_gc_high_value | default(80) }}'"
  when: check1_out.rc != 1

- name: add image-gc-high-threshold parameter
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - '{{ new_gc_high_value | default(80) }}'" }
    - { insertafter: "kubeletArguments:", line: "      image-gc-high-threshold:" }
  when: check1_out.rc == 1

# image-gc-low-threshold
- name: test if image-gc-low-threshold parameter exist
  command: grep "image-gc-low-threshold:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check2_out

- name: update image-gc-low-threshold
  block:
    - command: sed -i '/image-gc-low-threshold/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      image-gc-low-threshold:"
        line: "      - '{{ new_gc_low_value | default(75) }}'"
  when: check2_out.rc != 1

- name: add image-gc-low-threshold parameter
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - '{{ new_gc_low_value | default(75) }}'" }
    - { insertafter: "kubeletArguments:", line: "      image-gc-low-threshold:" }
  when: check2_out.rc == 1

# max-pods
- name: test if max-pods parameter exist
  command: grep "max-pods:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check3_out

- name: update max-pods allow per node
  block:
    - command: sed -i '/max-pods/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      max-pods:"
        line: "      - '{{ new_max_pod_value | default(250) }}'"
  when: check3_out.rc != 1

- name: add max-pods parameter 
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - '{{ new_max_pod_value | default(250) }}'" }
    - { insertafter: "kubeletArguments:", line: "      max-pods:" }
  when: check3_out.rc == 1

# pods-per-core
- name: test if pods-per-core parameter exist
  command: grep "pods-per-core:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check4_out

- name: update max-pods allow per node
  block:
    - command: sed -i '/pods-per-core/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      pods-per-core:"
        line: "      - '{{ new_pods_per_core_value | default(10) }}'"
  when: check4_out.rc != 1

- name: add pods-per-core parameter 
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - '{{ new_pods_per_core_value | default(10) }}'" }
    - { insertafter: "kubeletArguments:", line: "      pods-per-core:" }
  when: check4_out.rc == 1

# Eviction Policies
# eviction-hard policy
- name: test if eviction-hard parameter exist
  command: grep "eviction-hard:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check5_out

- name: update eviction-hard memory available value
  block:
    - command: sed -i '/eviction-hard/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      eviction-hard:"
        line: "      - memory.available<{{ new_eh_memory_avail | default('500Mi', true) }}"
  when: ( eh_policy and check5_out.rc != 1 )

- name: add eviction-hard parameter if doesn't exist
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - imagefs.inodesFree<{{ new_eh_percent_imagefs_free | default('10%', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - imagefs.available<{{ new_eh_percent_imagefs_avail | default('15%', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - nodefs.inodesFree<{{ new_eh_percent_inodefs_free | default('5%', true) }}" }    
    - { insertafter: "kubeletArguments:", line: "      - nodefs.available<{{ new_eh_percent_nodefs_avail | default('10%', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - memory.available<{{ new_eh_memory_avail | default('500Mi', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      eviction-hard:" }
  when: ( eh_policy and check5_out.rc == 1 )

# eviction-soft policy
- name: test if eviction-soft parameter exist
  command: grep "eviction-soft:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check6_out

- name: update eviction-soft memory available value
  block:
    - command: sed -i '/eviction-soft/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      eviction-soft:"
        line: "      - memory.available<{{ new_es_memory_avail | default('500Mi', true) }}"
  when: ( es_policy and check6_out.rc != 1 )

- name: add eviction-soft parameter 
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - imagefs.inodesFree<{{ new_es_percent_imagefs_free | default('10%', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - imagefs.available<{{ new_es_percent_imagefs_avail | default('15%', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - nodefs.inodesFree<{{ new_es_percent_inodefs_free | default('5%', true) }}" }    
    - { insertafter: "kubeletArguments:", line: "      - nodefs.available<{{ new_es_percent_nodefs_avail | default('10%', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - memory.available<{{ new_es_memory_avail | default('500Mi', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      eviction-soft:" }
  when: ( es_policy and check6_out.rc == 1 )

# eviction-soft-grace-period
- name: test if eviction-soft-grace-period parameter exist
  command: grep "eviction-soft-grace-period:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check7_out

- name: update eviction-soft-grace-period memory available value
  block:
    - command: sed -i '/eviction-soft-grace-period/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      eviction-soft-grace-period:"
        line: "      - memory.available<{{ new_esgp_memory_avail | default('1m30s', true) }}"
  when: ( esgp_policy and check6_out.rc != 1 ) 

- name: add eviction-soft-grace-period parameter 
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - imagefs.inodesFree={{ new_esgp_imagefs_free | default('1m30s', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - imagefs.available={{ new_esgp_imagefs_avail | default('1m30s', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - nodefs.inodesFree={{ new_esgp_inodefs_free | default('1m30s', true) }}" }    
    - { insertafter: "kubeletArguments:", line: "      - nodefs.available={{ new_esgp_nodefs_avail | default('1m30s', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      - memory.available={{ new_esgp_memory_avail | default('1m30s', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      eviction-soft-grace-period:" }
  when: ( esgp_policy and check7_out.rc == 1 )

## system-reserved
- name: test if system-reserved parameter exist
  command: grep "system-reserved:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check8_out

- name: update system-reserved values
  block:
    - command: sed -i '/system-reserved/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      system-reserved:"
        line: "      - cpu={{ new_systemd_cpu | default('800m', true) }},memory={{ new_systemd_memory | default('500Mi', true) }}"
  when: check8_out.rc != 1

- name: add system-reserved parameter
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - cpu={{ new_systemd_cpu | default('800m', true)}},memory={{ new_systemd_memory | default('500Mi', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      system-reserved:" }
  when: check8_out.rc == 1

## kube-reserved
- name: test if kube-reserved parameter exist
  command: grep "kube-reserved:" /tmp/{{ node }}.yaml
  ignore_errors: yes
  register: check9_out

- name: update kube-reserved values
  block:
    - command: sed -i '/kube-reserved/{n;d}' /tmp/{{ node }}.yaml
    - lineinfile: 
        path: /tmp/{{ node }}.yaml
        insertafter: "      kube-reserved:"
        line: "      - cpu={{ new_kube_cpu | default('800m', true) }},memory={{ new_kube_memory | default('500Mi', true) }}"
  when: check9_out.rc != 1

- name: add kube-reserved parameter
  lineinfile:
    path: /tmp/{{ node }}.yaml
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}" 
    backup: no
  with_items:
    - { insertafter: "kubeletArguments:", line: "      - cpu={{ new_kube_cpu | default('800m', true)}},memory={{ new_kube_memory | default('500Mi', true) }}" }
    - { insertafter: "kubeletArguments:", line: "      kube-reserved:" }
  when: check9_out.rc == 1

- name: output of config to be udpated
  shell: cat /tmp/{{ node }}.yaml
  register: config_out

- debug:
    var=config_out.stdout_lines

- name: please review and confirm to continue update
  pause: prompt='Please review. Press return to continue to update node configuration. Press Ctrl+c and then "a" to abort'

- name: updating config 
  shell: oc replace -f /tmp/{{ node }}.yaml -n openshift-node 

#- name: Test if minimum-container-ttl-duration parameter exist
#  command: grep "minimum-container-ttl-duration:" /tmp/{{ node }}.yaml
#  ignore_errors: yes
#  register: cmd_output

#- name: Add minimum-container-ttl-duration
#  lineinfile:
#    path: /tmp/{{ node }}.yaml
#    insertbefore: "{{ item.insertbefore }}"
#    line: "{{ item.line }}" 
#    backup: no
#  with_items:
#    - { insertbefore: "maximum-dead-containers:", line: "  minimum-container-ttl-duration:" }
#    - { insertbefore: "maximum-dead-containers:", line: "  - '10s'" }
#  when: cmd_output.rc == 1

#- name: Restart atomic node service
#  command: systemctl restart {{ atomic_service_name }}
#  register: service_restart

  