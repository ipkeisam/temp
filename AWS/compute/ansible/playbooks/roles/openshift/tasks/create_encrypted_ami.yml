---
#
# Create an encrypted AMI using RHEL private AMI. These is to prevent double charges.
# Please enroll AWS account to have RedHat make available RedHat Gold images, if not already done.  For info: https://access.redhat.com/articles/3490141
# Enrollment link: https://access.redhat.com/cloude/manager/gold_imports/new
#

- fail:
    msg: "{{ item }} needs to be defined"
  when: item not in vars
  with_items:
  - ami_name

- name: set RHEL private AMI ID to use
  set_fact:
    openshift_aws_ami_rhel_private: "{{ openshift_aws_ami_rhel_private_us_west_1 }}"
  when: openshift_aws_region == "us-west-1"

- name: set RHEL private AMI ID to use
  set_fact:
    openshift_aws_ami_rhel_private: "{{ openshift_aws_ami_rhel_private_us_east_1 }}"
  when: openshift_aws_region == "us-east-1"

# provision an instance from RedHat shared private AMI  
- name: provision a temp instance from RedHat private AMI 
  ec2:
    key_name: "{{ openshift_aws_ssh_key_name }}"
    region: "{{ openshift_aws_region }}"
    instance_type: t2.micro
    image: "{{ openshift_aws_ami_rhel_private }}"
    assign_public_ip: no
    wait: yes
  register: ec2output

- debug:
    var=ec2output

- name: fetch newly created temp instance
  ec2_instance_facts:
    region: "{{ openshift_aws_region }}"
    filters:
      instance-state-name: running
      instance-id: "{{ ec2output.instance_ids }}"      
  register: instancesout
  retries: 20
  delay: 3
  until: instancesout.instances|length > 0

- name: creating a temp AMI from running temp instance, please wait...
  ec2_ami:
    name: "{{ openshift_aws_ami_name }}" 
    instance_id: "{{ instancesout.instances[0].instance_id }}"
    region: "{{ openshift_aws_region }}"
    tags: "{{ openshift_aws_resource_tags }}"
    wait: "{{ openshift_aws_ami_copy_wait | default('yes', true) }}"
    state: present
  register: amioutput

- debug: var=amioutput

- name: "creating an encrypted AMI image. these process will take some time, please wait: {{ openshift_aws_ami_copy_wait }}"
  ec2_ami_copy:
    name: "{{ openshift_aws_ami_name }}-encrypted"
    region: "{{ openshift_aws_region }}"
    source_region: "{{ openshift_aws_region }}"
    source_image_id: "{{ amioutput.image_id }}"
    encrypted: "{{ openshift_aws_ami_encrypt | default(True) }}"
    kms_key_id: "{{ openshift_aws_volume_kms_key_id }}"
    wait: "{{ openshift_aws_ami_copy_wait | default('yes', true) }}"
    description: "This was created for Openshift Container Platform use"
    tags: "{{ openshift_aws_resource_tags }}"
  register: copy_result

- debug: var=copy_result

- name: return the encrypted AMI ID 
  set_fact:
    openshift_aws_rootenc_ami: "{{ copy_result.image_id }}"

- name: terminate temporary instance
  ec2:
    state: absent
    region: "{{ openshift_aws_region }}"
    instance_ids: "{{ instancesout.instances[0].instance_id }}"

- name: deregister the non-encrypted AMI
  ec2_ami:
    image_id: "{{ amioutput.image_id }}"
    region: "{{ openshift_aws_region }}"
    state: absent   