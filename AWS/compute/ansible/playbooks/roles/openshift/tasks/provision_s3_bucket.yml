---
# Lists all s3 buckets
- name: list all the s3 buckets in the specified region
  aws_s3_bucket_facts:
    region: "{{ openshift_aws_region }}"
  register: s3bucket_out

- debug:
    msg: "{{ item.name }}"
  with_items: "{{ s3bucket_out.ansible_facts.buckets }}"      

- name: check if bucket exists
  command: > 
    aws s3api head-bucket 
      --bucket "{{ openshift_aws_s3_bucket_name }}"
  ignore_errors: yes  
  register: bucket_exist

- debug:
    msg: "{{ bucket_exist }}"

- name: create s3 bucket if doesn't exist
  s3_bucket:
    name: "{{ openshift_aws_s3_bucket_name }}"
    state: present
    region: "{{ openshift_aws_region }}"
    tags: "{{ openshift_aws_resource_tags }}"
  when: bucket_exist.rc != 0

- name: check if s3 bucket exists before applying encryption, lifecycle clean up rules, and logging 
  command: > 
    aws s3api head-bucket 
      --bucket "{{ openshift_aws_s3_bucket_name }}"
  ignore_errors: yes  
  register: bucket_exist

- debug:
    msg: "{{ bucket_exist }}"

- name: encrypt s3 bucket with ocp s3 kms key
  command: > 
    aws s3api put-bucket-encryption --bucket "{{ openshift_aws_s3_bucket_name }}" --server-side-encryption-configuration '{
        "Rules": [
            {
                "ApplyServerSideEncryptionByDefault": {
                    "KMSMasterKeyID": "{{ openshift_aws_s3_kms_key_id }}",
                    "SSEAlgorithm": "aws:kms"
                }
            }
        ]
    }'
  when: bucket_exist.rc == 0

- name: set lifecycle rule cleanup incomplete multi-part upload after 7 days
  command: >
    aws s3api put-bucket-lifecycle-configuration
      --bucket "{{ openshift_aws_s3_bucket_name }}"
      --region "{{  openshift_aws_region }}"
      --lifecycle-configuration file://"{{ role_path }}"/files/s3_lifecycle_rule.json
  when: bucket_exist.rc == 0  

- name: enable s3 server access logging of s3 bucket
  s3_logging:
    name: "{{ openshift_aws_s3_bucket_name }}"
    target_bucket: "{{ openshift_aws_s3_bucket_name }}"
    target_prefix: logs
    state: present
  when: bucket_exist.rc == 0

- name: set s3 public access settings
  command: >
    aws s3api put-public-access-block
      --bucket "{{ openshift_aws_s3_bucket_name }}"
      --region "{{  openshift_aws_region }}"
      --public-access-block-configuration file://"{{ role_path }}"/files/s3_public_access_settings.json
  when: bucket_exist.rc == 0