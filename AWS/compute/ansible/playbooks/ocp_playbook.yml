---

- hosts: localhost
  connection: local
  gather_facts: no
 
##########################################################################################################
#
# Playbook for provisioning of 3 node Openshift Container Platform in AWS 
# Set control flags to create/provision the following:
#   - create key pair for ssh 
#   - create an encrypted AMI image to use
#   - provision security groups
#   - provision control/bastion, master, app and infra hosts
#   - create elbs
#   - create the inventory configuration file
#   - provision IAM user and policies
#   - provision S3 bucket and policies
#
# Instruction:  
#    To run:
#      1. Source AWS credentials ( make sure that it corresponds to the account and environment that is being worked on)
#      2: Run playbook:  ansible-playbook -e "env_var_file=<env specific vars>" ocp_playbook.yml
#
# Example:  ansible-playbook -e "env_var_file=int_dev_us_east_1.yml" ocp_playbook.yml
#
# extra-vars options 
#  --------------------------------------------------------------------------------------------------------------------
#  |  variable name           |       value                 |    require or optionanl   |     comments
#  --------------------------------------------------------------------------------------------------------------------
#  | env_var_file             | env specif var file         |    require                | located under roles/openshift/vars/
#  ---------------------------------------------------------------------------------------------------------------------
#  | master_docker_vol_size   | numerical value in GB       |   optional (default 50 )  |     
#  ---------------------------------------------------------------------------------------------------------------------
#  | infra_docker_vol_size    | numerical value in GB       |   optional (default 100 ) |              
#  ---------------------------------------------------------------------------------------------------------------------
#  | app_docker_vol_size      | numerical value in GB       |   optional (default 100 ) |
#  -----------------------------------------------------------------------------------------------------------------------
#
#  LastUpdated: 2018-05-30
#  UpdatedBy: Cuong Tong ( cuot@capgroup.com )
#

  vars:
    # define env specific var 
    openshift_aws_env_var_file: "{{ env_var_file }}"
    # flags to enable / disable tasks  
    openshift_aws_create_key_pair: False
    openshift_aws_create_ami_image: False
    openshift_aws_create_security_groups: False
    openshift_aws_provision_control_host: False 
    openshift_aws_provision_master_hosts: False 
    openshift_aws_provision_infra_hosts: False 
    openshift_aws_provision_app_hosts: False 
    openshift_aws_create_elb: False
    openshift_aws_provision_s3: False
    openshift_create_user: False
    openshift_s3policy_template: False
    openshift_create_aws_policies: False
    openshift_aws_generate_inv_cfg: False

  tasks:
  - fail:
      msg: "{{ item }} needs to be defined"
    when: item not in vars
    with_items:
    - env_var_file
      
  - name: include env file to work around ansible 2.4 issue
    include_vars: roles/openshift/vars/{{ env_var_file }}

  # create key pair for ssh 
  - name: create key pair 
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}"    
      tasks_from: create_key_pair.yml
    when: openshift_aws_create_key_pair | default(True) | bool 

  # create encrypted ami image
  - name: create encrypted ami image
    import_role:
      name: openshift
      tasks_from: create_encrypted_ami.yml
    vars:
      openshift_aws_ami_name: "{{ ami_name }}"
      openshift_aws_resource_type: OpenShift Container Platform AMI
    when: openshift_aws_create_ami_image | default(True) | bool 

  # create security groups
  # security group has circular reference will fail on first run
  # needs to be re-run 
  - name: create security groups
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: create_security_groups.yml
    vars:
      openshift_aws_resource_type: OCP Security Groups
    when: openshift_aws_create_security_groups | default(True) | bool 

  # pause for 10 secs before proceeding
  - name: pause a bit before continuing
    pause:
      seconds: 10

  # Provision control/bastion hosts
  - name: provision control/bastion hosts
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_control_instance.yml
    vars:
      openshift_aws_resource_type: "{{ aws_controlhost_type }}"
    when: openshift_aws_provision_control_host | default(True) | bool 

  # Provision master hosts
  - name: provision master hosts 1
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_master_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_masterhost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_1"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_1"] }}'
    when: openshift_aws_provision_master_hosts | default(True) | bool

  - name: provision master hosts 2
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_master_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_masterhost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_2"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_2"] }}'
    when: openshift_aws_provision_master_hosts | default(True) | bool

  - name: provision master hosts 3
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_master_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_masterhost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_3"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_3"] }}'
    when: openshift_aws_provision_master_hosts | default(True) | bool 

  # Provision infra hosts
  - name: provision infra hosts 1
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_infra_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_infrahost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_1"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_1"] }}'
    when: openshift_aws_provision_infra_hosts | default(True) | bool

  - name: provision infra hosts 2
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_infra_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_infrahost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_2"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_2"] }}'
    when: openshift_aws_provision_infra_hosts | default(True) | bool         

  - name: provision infra hosts 3
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_infra_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_infrahost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_3"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_3"] }}'
    when: openshift_aws_provision_infra_hosts | default(True) | bool    

  # Provision app hosts
  - name: provision app hosts 1
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_app_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_apphost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_1"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_1"] }}'
    when: openshift_aws_provision_app_hosts | default(True) | bool
    
  - name: provision app hosts 2
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_app_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_apphost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_2"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_2"] }}'
    when: openshift_aws_provision_app_hosts | default(True) | bool

  - name: provision app hosts 3
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}" 
      tasks_from: provision_app_instances.yml
    vars:
      openshift_aws_resource_type: "{{ aws_apphost_type }}"
      openshift_aws_admin_subnet: '{{ vars["openshift_aws_admin_subnet_3"] }}'
      openshift_aws_cluster_subnet: '{{ vars["openshift_aws_cluster_subnet_3"] }}'
    when: openshift_aws_provision_app_hosts | default(True) | bool

  # pause for 10 secs before proceeding
  - name: pause a bit before continuing
    pause:
      seconds: 10
      
  # create elbs
  - name: create elb 
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}"
      tasks_from: create_elb.yml
    vars:
      openshift_aws_resource_type: "{{ aws_loadbalancer_type }}"
    when: openshift_aws_create_elb | default(True) | bool

  - name: generate the inventory config file from template
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}"
      tasks_from: create_inventory_cfg_file.yml
    vars:
        # specify file name 
        openshift_aws_config_file_name: "{{ openshift_aws_env }}.cfg"
    when: openshift_aws_generate_inv_cfg | default(True) | bool

  # create s3 bucket
  - name: create s3
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}"
      tasks_from: provision_s3_bucket.yml
    vars:
      openshift_aws_resource_type: OCP Docker Registry 
    when: openshift_aws_provision_s3 | default(True) | bool 

     # create iam user
  - name: create iam user
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}"
      tasks_from: create_user.yml
    when: openshift_create_user | default(True) | bool

  # create s3 template
  - name: Create s3 policy json file from template
    include_role:
      name: openshift
      #vars_from: "{{ openshift_aws_env_var_file }}"
      tasks_from: create_s3policy_template.yml
    when: openshift_s3policy_template | default(True) | bool

  - name: Create ec2 & s3 policy on AWS
    include_role:
      name: openshift
      tasks_from: create_iampolicies.yml
    when: openshift_create_aws_policies | default(True) | bool