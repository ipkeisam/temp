---
  
##### 
# A RHEL OS security patching playbook for OCP
# 
# Patches RHEL hosts to latest packages or latest security packages
#  - Takes updates to latest available package(s) from the pre-configure yum repositories
# 
# Instruction:  
#    To run:
#      1. Run playbook: ansible-playbook -i <inventory file> -e "host_name=<host label> is_app_node=True" utils_rhel_patch_playbook.yml
#
# Example:  ansible-playbook -i ocp-nadqa-west1.cfg -e "host_name=masters[0] is_app_node=True" utils_rhel_patch_playbook.yml
# 
# extra-vars options 
#  --------------------------------------------------------------------------------------------------------------------
#  |  variable name           |       value                 |    require or optional    |     comments
#  --------------------------------------------------------------------------------------------------------------------
#  | host_name                | name of host or label       |    require                | nodes[0] or masters, etc.
#  ---------------------------------------------------------------------------------------------------------------------
#  | is_ocp                   | True or False               |    optional               | default is True ( set False if not for OCP, i.e HA Proxy servers or bastion )
#  --------------------------------------------------------------------------------------------------------------------
#  | is_app_node              | True or False               |    optional               | defaults is False
#  ---------------------------------------------------------------------------------------------------------------------
#  | security_only            | True or False               |    optional               | default will only do security updates for all available RHSA errata
#  ---------------------------------------------------------------------------------------------------------------------   
#
#  LastUpdated: 2018-11-30
#  UpdatedBy: Cuong Tong ( cuot@capgroup.com )
#

- hosts: masters[0]
  gather_facts: no

  tasks:
  - fail:
      msg: "{{ item }} needs to be defined"
    when: item not in vars
    with_items:
    - host_name

  - name: set default is_app_node to false
    set_fact:
      is_app_node: false
    when: is_app_node is undefined

  - name: confirm to continue
    pause: prompt='Please confirm to continue with evacuating of app node - "{{ host_name }}"! Press return to continue. Press Ctrl+c and then "a" to abort'
    when: is_app_node  

  - name: Evacuating of pods on "{{ host_name }}" node 
    command: oc adm manage-node "{{ host_name }}" --schedulable=false
    when: is_app_node  

  - name: confirm to continue
    pause: prompt='Please confirm to continue with draining of app node - "{{ host_name }}"! Press return to continue. Press Ctrl+c and then "a" to abort'
    when: is_app_node  

  - name: Draining "{{ host_name }}" node 
    command: oc adm drain "{{ host_name }}" --ignore-daemonsets --delete-local-data
    when: is_app_node  

  - name: confirm to continue
    pause: prompt='Please confirm to continue with patching! Press return to continue. Press Ctrl+c and then "a" to abort'
    when: is_app_node 

- hosts: "{{ host_name }}"
  gather_facts: no
  become: true
  become_user: root
  become_method: sudo

  tasks:
  - name: set default security_only flag if not defined
    set_fact:
      security_only: true
    when: security_only is undefined

  - name: set default is_ocp to true
    set_fact:
      is_ocp: true
    when: is_ocp is undefined

  - debug:
      var=security_only 

  - debug:
      var=is_ocp 

  # section is to patch OCP hosts
  - name: start updates/patch and reboot server
    import_role:
      name: utils
      tasks_from: rhel_security_patch.yml
    when: is_ocp 

  # Update / patch other hosts
  - name: update all packages on non OCP hosts 
    yum:
      state: latest
      name: '*'
    register: yum_output
    when: 
      - "is_ocp=='false'"
      - "security_only=='false'"

  - name: Install Red Hat Security Advisory (RHSA) on non OCP hosts 
    yum:
      state: latest
      name: '*'
      security: yes
    register: yum_output
    when: 
      - "is_ocp=='false'"
      - security_only

  - name: confirm to continue
    pause: prompt='Please confirm to reboot host - "{{ host_name }}"! Connection will be terminated! Press return to continue. Press Ctrl+c and then "a" to abort'
    when: "is_ocp=='false'"

  - name: reboot host
    shell: sleep 5 && shutdown -r now "Ansible updates triggered"
    async: 1
    poll: 0
    when: "is_ocp=='false'"

- hosts: masters[0]
  gather_facts: no

  tasks:
  - name: set default is_app_node to false
    set_fact:
      is_app_node: false
    when: is_app_node is undefined

  - name: set default is_ocp to true
    set_fact:
      is_ocp: true
    when: is_ocp is undefined

  - name: confirm to continue
    pause: prompt='Please confirm that OCP node "{{ host_name }}" is up and running before continuing! Press return to continue. Press Ctrl+c and then "a" to abort'
    when: is_ocp
    
  - name: re-enable scheduling of "{{ host_name }}" node 
    command: oc adm manage-node "{{ host_name }}" --schedulable=true
    when: is_app_node

  - name: retrieve Openshift version
    command: oc version
    run_once: true
    register: version_output

  - name: retrieve node status
    shell: oc get nodes
    run_once: true
    register: oc_out

  - name: display node status
    debug: var=oc_out.stdout_lines

  - debug:
      msg: "Please run health checks when all hosts are patched: ansible-playbook -i <inventory_file> /usr/share/ansible/openshift-ansible/playbooks/byo/openshift-checks/health.yml"
    when: 
      - is_ocp
      - ("v3.7" in version_output.stdout)

  - debug:
      msg: "Please run health checks when all hosts are patched: ansible-playbook -i <inventory_file> /usr/share/ansible/openshift-ansible/playbooks/openshift-checks/health.yml"
    when: 
      - is_ocp
      - ("v3.9" in version_output.stdout)

  - debug:
      msg: "Please run health checks when all hosts are patched: ansible-playbook -i <inventory_file> /usr/share/ansible/openshift-ansible/playbooks/openshift-checks/health.yml"
    when: 
      - is_ocp
      - ("v3.10" in version_output.stdout)