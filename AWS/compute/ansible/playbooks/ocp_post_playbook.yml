---
  
##### 
# These playbook to run after host provisioning, prior to OCP install and base agent install
# It should only be run on the OCP control/bastion host  
# 
# Configure the following:
#  - create, format and mount etcd or origin volume
#  - configure ssh for password authentication and harden ssh
#  - enable ryslog 
#  - provision service now local accounts and setup sudo access
#  - dual nic configuration ( optional )
#  - install latest security updates
#
# Instruction:  
#    To run:
#      1. Source AWS credentials ( make sure that it corresponds to the account and environment that is being worked on)
#      2: Run playbook: ansible-playbook -i ocp_hosts.ini -e "host_name=<private_dns_hostname> env_var_file=<env var file name> mount_type=<origin or etcd> device_type=<nvme or ssd>"  --private-key=<private key file name> -u ec2-user ocp_post_playbook.yml
#
# Example:  ansible-playbook -i ocp_hosts.ini -e "host_name=ip-10-211-81-210.ec2.internal env_type=prd env_var_file=ext_prod_us_east_1.yml aws_device_name=/dev/sdc device_name=/dev/xvdc mount_type=origin device_type=ssd" --private-key=/home/ec2-user/ocp-provisioning/ocp-ext-prod-us-east-1.pem -u ec2-user ocp_post_playbook.yml
# 
# extra-vars options 
#  --------------------------------------------------------------------------------------------------------------------
#  |  variable name           |       value                 |    require or optionanl   |     comments
#  --------------------------------------------------------------------------------------------------------------------
#  | host_name                | AWS private dns name        |    require                | 
#  ---------------------------------------------------------------------------------------------------------------------
#  | env_type                 | dev, qa or prd              |    optional               | if not define uses openshift_aws_env_type in env var file 
#  ---------------------------------------------------------------------------------------------------------------------
#  | env_var_file             | env specif var file         |    require                | located under roles/openshift/vars/
#  ---------------------------------------------------------------------------------------------------------------------
#  ! device_name              | /dev/xvdc                    |    optional              | default is /dev/xvdc ,  origin or etcd OS device
 # ---------------------------------------------------------------------------------------------------------------------
#  ! aws_device_name          | /dev/sdc                    |    optional               | default is /dev/sdc ,  origin or etcd AWS EBS label name
#  ---------------------------------------------------------------------------------------------------------------------
#  | mount_type               | origin or etcd              |    require                | etcd for master nodes, origin for app and infra nodes
#  ---------------------------------------------------------------------------------------------------------------------
#  | device_type              | nvme or ssd                 |    require                | depends on AWS instance types use
#  ---------------------------------------------------------------------------------------------------------------------
#  
#
#  LastUpdated: 2018-12-10
#  UpdatedBy: Philip Phan ( phlp@capgroup.com )
#  CreatedBy: Cuong Tong ( cuot@capgroup.com )

- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
  - fail:
      msg: "{{ item }} needs to be defined"
    when: item not in vars
    with_items:
    - env_var_file
    - mount_type
    - device_type 
    - host_name

  - name: include env file 
    include_vars: roles/openshift/vars/{{ env_var_file }}

  # query for instance information that is being worked on
  - name: query instance info to be worked on
    ec2_instance_facts:
      region: "{{ openshift_aws_region }}"
      filters:   
        instance-state-name: running
        "private-dns-name": "{{ host_name }}"
    register: instancesout
    retries: 20
    delay: 3
    until: instancesout|length > 0

  - name: query for volume info
    ec2_vol_facts:
      region: "{{ openshift_aws_region }}"
      filters:
        "attachment.device": "{{ aws_device_name | default('/dev/sdc', true) }}"  
        "attachment.instance-id": "{{ instancesout.instances[0].instance_id }}"
        "attachment.status": attached
    register: volumeout
    
  # set the volume id 
  - name: set the volume id 
    set_fact: 
      volume_id: "{{ volumeout.volumes[0].id | regex_replace('-', '') }}"

- hosts: "{{ host_name }}"
  gather_facts: no
  become_user: root

  vars:  
      utils_rsyslog_install: True
      utils_unix_local_acct: True
      ansible_user: ec2-user

  tasks:
  - fail:
      msg: "{{ item }} needs to be defined"
    when: item not in vars
    with_items:
    - env_var_file
    - mount_type
    - device_type 

  - name: copy in the bastion key
    become: yes
    authorized_key:
      user: "{{ ansible_user }}"
      state: present
      key: "{{ lookup('file', '/home/{{ ansible_user }}/.ssh/id_rsa.pub') }}"

  - name: set the volume id
    set_fact:
      volume_id: "{{ hostvars['localhost']['volume_id'] }}"
    
  - name: include env file 
    include_vars: roles/openshift/vars/{{ env_var_file }}

  - name: create /var/lib/origin mount point 
    become: yes
    file:
      path: /var/lib/origin
      state: directory
      mode: 0755    
    when: mount_type == "origin"

  - name: create /var/lib/etcd mount point
    become: yes
    command:  mkdir -p /var/lib/etcd
    when: mount_type == "etcd"

  - name: create a ext4 filesystem for nvme block device
    become: yes
    filesystem:
      fstype: ext4
      dev: /dev/disk/by-id/nvme-Amazon_Elastic_Block_Store_{{ volume_id }}
    when: device_type == "nvme"

  - name: create a ext4 filesytem for non nvme block device
    become: yes
    filesystem:
      fstype: ext4
      dev: "{{ device_name | default('/dev/xvdc', true) }}"
    when: device_type == "ssd"

  # pause for 10 secs before proceeding allow time for fs creation to complete 
  - name: pause a bit before continuing
    pause:
      seconds: 10

  - name: mount /var/lib/origin
    become: yes
    mount:
      path: /var/lib/origin
      src: /dev/disk/by-id/nvme-Amazon_Elastic_Block_Store_{{ volume_id }}
      fstype: ext4
      opts: defaults,nofail
      state: mounted
      passno: 2
    when: (mount_type == "origin" and device_type == "nvme")

  - name: mount /var/lib/etcd
    become: yes
    mount:
      path: /var/lib/etcd
      src: /dev/disk/by-id/nvme-Amazon_Elastic_Block_Store_{{ volume_id }}
      fstype: ext4
      opts: defaults,nofail
      state: mounted
      passno: 2
    when: (mount_type == "etcd" and device_type == "nvme")

  - name: mount /var/lib/origin
    become: yes
    mount:
      path: /var/lib/origin
      src: "{{ device_name | default('/dev/xvdc', true) }}"
      fstype: ext4
      opts: defaults,nofail
      state: mounted
      passno: 2    
    when: (mount_type == "origin" and device_type == "ssd")

  - name: mount /var/lib/etcd
    become: yes
    mount:
      path: /var/lib/etcd
      src: "{{ device_name | default('/dev/xvdc', true) }}"
      fstype: ext4
      opts: defaults,nofail
      state: mounted
      passno: 2    
    when: (mount_type == "etcd" and device_type == "ssd")

  - name: confirm to continue
    pause: prompt='Starting OS config and updates! Press return to continue. Press Ctrl+c and then "a" to abort'

  - name: secure ssh config and set localtime to PST
    become: yes
    block:
      # update sshd_config and cloud.cfg to allow password auth
#      - command: "sed -i 's/^ssh_pwauth:.*/ssh_pwauth:   1/' /etc/cloud/cloud.cfg"
#      - command: "sed -i 's/^PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config"
      - lineinfile:
          path: /etc/cloud/cloud.cfg
          regexp: '^(.*)ssh_pwauth:(.*)$'
          line: 'ssh_pwauth:   1'
          backrefs: yes 
      - lineinfile:
          path: /etc/ssh/sshd_config
          regexp: '^(.*)PasswordAuthentication no'
          line: 'PasswordAuthentication yes'
          backrefs: yes          
      # only allow strong ciphers for ssh
      - lineinfile:
          path: /etc/ssh/ssh_config
          insertafter: "#   Protocol 2"
          line: "MACS hmac-sha1,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160" 
          backup: no      
      - lineinfile:
          path: /etc/ssh/ssh_config
          insertafter: "#   Protocol 2"
          line: "Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,arcfour" 
          backup: no
      - lineinfile:
          path: /etc/ssh/sshd_config
          insertafter: "#RekeyLimit default none"
          line: "MACS hmac-sha1,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160" 
          backup: no      
      - lineinfile:
          path: /etc/ssh/sshd_config
          insertafter: "#RekeyLimit default none"
          line: "Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,arcfour" 
          backup: no                
      - service: name=sshd state=restarted 
      # update locatime to America/Los_Angeles zone
#      - command: rm -f /etc/localtime
#      - command: ln -s /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
      - name: remove /etc/localtime symlink
        file:
          path: /etc/localtime
          state: absent
      - name: setup /etc/localtime symlink to America/Los_Angeles zone
        file: 
          path: /etc/localtime 
          src: /usr/share/zoneinfo/America/Los_Angeles
          state: link 
          force: yes
             
  - name: configure dual NIC routing          
    become: yes
    block:
      - command: nmcli conn add type ethernet con-name 'System eth1' ifname eth1
      - command: nmcli conn modify 'System eth0' ipv4.never-default 'yes'
      - command: eth0gateway=`ip route|egrep 'default.*eth0'|awk '{print $3}'`
      - command: eth1gateway=`ip route|egrep 'default.*eth1'|awk '{print $3}'`
      - command: nmcli conn modify 'System eth0' +ipv4.routes "10.0.0.0/8 $eth0gateway"
      - command: "echo 'network: {config: disabled}' > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg"
      - service: name=network state=restarted 
    when: openshift_aws_dual_nic         

  - name: install ryslsog in Linux
    become: yes
    import_role:
      name: splunk
      tasks_from: rsyslog.yml
    when: utils_rsyslog_install | default(False) | bool

  # for now only provision service now accts
  - name: provision local accounts
    become: yes
    import_role:
      name: utils
      tasks_from: provision_unix_accounts.yml
    vars:
      env_type: "{{ openshift_aws_env_type }}"      
    when: utils_unix_local_acct | default(False) | bool

  - name: refresh yum repo 
    become: yes
    command: yum repolist

  - name: install latest OS updates
    become: yes
    yum:
      name: '*'
      security: yes      
      state: latest

  - name: confirm to continue
    pause: prompt='{{ host_name }} needs to be rebooted! Press return to continue. Press Ctrl+c and then "a" to abort'

  - name: Rebooting ...
    become: yes
    command: shutdown -r now "Reboot required for updated kernel"