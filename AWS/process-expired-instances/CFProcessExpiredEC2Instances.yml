AWSTemplateFormatVersion: 2010-09-09
Description: Tag NonCompliance Stack
Parameters:
  SNSRegion:
    Default: us-east-1
    Type: String
  SNSTopicArn:
    Default: arn:aws:sns:us-east-1:848721808596:SNSTopicForExpiryAlerts
    Type: String
  AlertSchedule:
    Default: cron(0 15 ? * MON-SUN *)
    Type: String
Resources:
  ScheduleEC2ExpiryRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Schedule that runs every day to check if any EC2 instance has reached its expiry date.
      Name: TagRemediation-ScheduleRule
      ScheduleExpression: !Ref AlertSchedule
      State: ENABLED
      Targets:
        - 
          Arn: 
            Fn::GetAtt: 
              - "LFProcessExpiredEC2Instances"
              - "Arn"
          Id: "LFProcessExpiredEC2Production"
  PermissionForCWEventToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: 
        Ref: LFProcessExpiredEC2Instances
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: 
          - ScheduleEC2ExpiryRule
          - Arn
  LFProcessExpiredEC2Instances:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: TagRemediation-LFProcessExpiredEC2Instances
      Description: Process EC2 instances with expiry dates
      Handler: index.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          SNS_REGION:
            Ref: SNSRegion
          SNS_TOPIC_ARN:
            Ref: SNSTopicArn
      Role: !GetAtt 
        - LFProcessExpiredEC2InstancesRole
        - Arn
      Timeout: 120
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import datetime
          import sys
          import dateutil.tz
          import botocore
          import os

          def send_expiry_alert(expiredInstances,date):
              region = os.environ['SNS_REGION']
              topicArn = os.environ['SNS_TOPIC_ARN']
              session = boto3.session.Session()
              sns_client = session.client(
                          service_name='sns',
                          region_name=region
                      )
              try:
                  message = str(expiredInstances)
                  subject = "Expired EC2 instances from yesterday " + date + " to be shutdown"
                  response = sns_client.publish(
                      TopicArn=topicArn,
                      Message=message,
                      Subject=subject
                  )
              except botocore.exceptions.ClientError as e:
                  print("Error : {}".format(e))

          def lambda_handler(event, context):
              expired_instances = []
              expiry_tag = 'exp-date'
              all_instances = []
              #filter for instances with the correct tag
              ec2 = boto3.resource('ec2')
              instances = ec2.instances.filter(Filters=[{'Name': 'tag-key', 'Values':[expiry_tag]}])
              #grab the expiry string
              for instance in instances:
                  for tag in instance.tags:
                      if tag['Key'] == expiry_tag:
                          all_instances.append({'instance':instance, 'expiry':tag['Value']})
         
              print(all_instances)
              pacific = dateutil.tz.gettz('US/Pacific')
              yesterday = datetime.datetime.now(tz=pacific) - datetime.timedelta(days = 1)
              formatted_date = f"{yesterday:%m}" + "-" + f"{yesterday:%d}" + "-" + str(yesterday.year)
              print(formatted_date)

              for instances in all_instances:
                  expiry_date = instances['expiry']
                  if formatted_date in expiry_date:
                      expired_instances.append({'instance':instances})
              if expired_instances:
                  response = send_expiry_alert(expired_instances,formatted_date)
  LFProcessExpiredEC2InstancesLG:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: LFProcessExpiredEC2Instances
    Properties:
      LogGroupName:
        'Fn::Join':
          - ''
          - - /aws/lambda/
            - Ref: LFProcessExpiredEC2Instances
      RetentionInDays: 14
  LFProcessExpiredEC2InstancesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: LFProcessExpiredEC2InstancesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'